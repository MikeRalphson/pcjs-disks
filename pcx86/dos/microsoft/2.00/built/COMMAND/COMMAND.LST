Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-1
                                                            

                                ; 
                                ; This version of COMMAND is divided into three
				 distinct parts.  First is the 
                                ; resident portion, which includes handlers for
				 interrupts 22H (terminate), 
                                ; 23H (Cntrl-C), 24H (fatal error), and 27H (st
				ay resident); it also has code 
                                ; to test and, if necessary, reload the transie
				nt portion.  Following the 
                                ; resident is the init code, which is overwritt
				en after use.  Then comes the 
                                ; transient portion, which includes all command
				 processing (whether internal 
                                ; or external).  The transient portion loads at
				 the end of physical memory, 
                                ; and it may be overlayed by programs that need
				 as much memory as possible. 
                                ; When the resident portion of command regains 
				control from a user program, a 
                                ; checksum is performed on the transient portio
				n to see if it must be 
                                ; reloaded.  Thus programs which do not need ma
				ximum memory will save the time 
                                ; required to reload COMMAND when they terminat
				e. 
                                 
                                ; 
                                ; REV 1.17 
                                ;    05/19/82   Fixed bug in BADEXE error (relo
				cation error must return to 
                                ;               resident since the EXELOAD may 
				have overwritten the transient. 
                                ; REV 1.18 
                                ;    05/21/82   IBM version always looks on dri
				ve A 
                                ;               MSVER always looks on default d
				rive 
                                ; 
                                ; REV 1.19 
                                ;    06/03/82   Drive spec now entered in comma
				nd line 
                                ;    06/07/82   Added VER command (print DOS ve
				rsion number) and VOL command 
                                ;               (print volume label) 
                                ; REV 1.20 
                                ;    06/09/82   Prints "directory" after direct
				ories 
                                ;    06/13/82   MKDIR, CHDIR, PWD, RMDIR added 
                                ; REV 1.50 
                                ;               Some code for new 2.0 DOS, sort
				 of HACKey.  Not enough time to 
                                ;               do it right. 
                                ; REV 1.70 
                                ;               EXEC used to fork off new proce
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-2
                                                            

				sses 
                                ; REV 1.80 
                                ;               C switch for single command exe
				cution 
                                ; REV 1.90 
                                ;               Batch uses XENIX 
                                ; Rev 2.00 
                                ;               Lots of neato stuff 
                                ;               IBM 2.00 level 
                                ; Rev 2.01 
                                ;               'D' switch for date time suppre
				ssion 
                                ; Rev 2.02 
                                ;               Default userpath is NUL rather 
				than BIN 
                                ;                       same as IBM 
                                ;               COMMAND split into pieces 
                                ; Rev 2.10 
                                ;               INTERNATIONAL SUPPORT 
                                ; Rev 2.11      COMMAND split into more pieces 
                                 
                             C          INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-3
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-10
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-11
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-12
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-13
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-14
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-15
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-16
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-17
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-18
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-19
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  ELSE 
                             C    IF IBM 
                             C      ENDIF 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (VER / 100) 
 = 0000                      C  DOS_MINOR_VERSION   EQU     (VER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-20
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-21
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-22
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-23
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-24
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-25
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-26
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-27
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-28
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-29
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-30
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-31
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-32
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-33
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-34
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-35
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-36
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-37
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-38
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-39
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-40
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-41
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-42
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-43
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-44
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-45
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-46
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-47
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-48
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-49
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-50
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-51
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-52
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-53
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-54
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-55
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-56
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-57
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-58
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                                 
                             C          INCLUDE DEVSYM.ASM 
                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-59
DEVICE TABLE AND SRH DEFINITION                             

                             C  PAGE 
                             C  ; The device table list has the form: 
                             C  SYSDEV  STRUC 
 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointer to nex
				t device header 
 0004  ????                  C  SDEVATT         DW      ?       ;Attributes of 
				the device 
 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strategy entry
				 point 
 0008  ????                  C  SDEVINT         DW      ?       ;Interrupt entr
				y point 
 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name of devi
				ce (only first byte used for block) 
            ??               C  
                         ]   C  
                             C  
 0012                        C  SYSDEV  ENDS 
                             C   
                             C  ;Attribute bit masks 
 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15 - 1  if
				 Char, 0 if block 
 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14 - CONTR
				OL mode bit 
 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13 - Devic
				e uses FAT ID bytes, comp media. 
 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 - This d
				evice is the console input. 
 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 - This d
				evice is the console output. 
 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 - This d
				evice is the null device. 
 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 - This d
				evice is the clock device. 
 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 - This d
				evice is special 
                             C   
                             C  ;Static Reguest Header 
                             C  SRHEAD  STRUC 
 0000  ??                    C  REQLEN  DB      ?               ;Length in byte
				s of request block 
 0001  ??                    C  REQUNIT DB      ?               ;Device unit nu
				mber 
 0002  ??                    C  REQFUNC DB      ?               ;Type of reques
				t 
 0003  ????                  C  REQSTAT DW      ?               ;Status Word 
 0005  0008[                 C          DB      8 DUP(?)        ;Reserved for q
				ueue links 
            ??               C  
                         ]   C  
                             C  
 000D                        C  SRHEAD  ENDS 
                             C   
                             C  ;Status word masks 
 = 8000                      C  STERR   EQU     8000H           ;Bit 15 - Error
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-60
DEVICE TABLE AND SRH DEFINITION                             

				 
 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 - Buisy 
 = 0100                      C  STDON   EQU     0100H           ;Bit 8 - Done 
 = 00FF                      C  STECODE EQU     00FFH           ;Error code 
 = 0000                      C  WRECODE EQU     0 
                             C   
                             C  ;Function codes 
 = 0000                      C  DEVINIT EQU     0               ;Initialization
				 
 = 001A                      C  DINITHL EQU     26              ;Size of init h
				eader 
 = 0001                      C  DEVMDCH EQU     1               ;Media check 
 = 000F                      C  DMEDHL  EQU     15              ;Size of media 
				check header 
 = 0002                      C  DEVBPB  EQU     2               ;Get BPB 
 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL read 
 = 0016                      C  DBPBHL  EQU     22              ;Size of Get BP
				B header 
 = 0004                      C  DEVRD   EQU     4               ;Read 
 = 0016                      C  DRDWRHL EQU     22              ;Size of RD/WR 
				header 
 = 0005                      C  DEVRDND EQU     5               ;Non destructiv
				e read no wait (character devs) 
 = 000E                      C  DRDNDHL EQU     14              ;Size of non de
				structive read header 
 = 0006                      C  DEVIST  EQU     6               ;Input status 
 = 000D                      C  DSTATHL EQU     13              ;Size of status
				 header 
 = 0007                      C  DEVIFL  EQU     7               ;Input flush 
 = 000F                      C  DFLSHL  EQU     15              ;Size of flush 
				header 
 = 0008                      C  DEVWRT  EQU     8               ;Write 
 = 0009                      C  DEVWRTV EQU     9               ;Write with ver
				ify 
 = 000A                      C  DEVOST  EQU     10              ;Output status 
 = 000B                      C  DEVOFL  EQU     11              ;Output flush 
 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL write 
                                 
                             C          INCLUDE COMSW.ASM 
                             C  ; Use the following booleans to set assembly fl
				ags 
 = 0000                      C  FALSE   EQU     0 
 = FFFF                      C  TRUE    EQU     NOT FALSE 
                             C   
                             C  ENDIF 
                             C   
 =                           C  IBMVER  EQU     IBM  	; Switch to build IBM ver
				sion of Command 
 = 0000                      C  MSVER   EQU     NOT IBM ; Switch to build MS-DO
				S version of Command 
                             C   
 =                           C  HIGHMEM EQU     FALSE   ; Run resident part abo
				ve transient (high memory) 
 =                           C  KANJI   EQU     FALSE   ; Support for dual byte
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-61
DEVICE TABLE AND SRH DEFINITION                             

				 Microsoft KANJI standard 
 =                           C  IBMJAPAN        EQU     FALSE   ;MUST BE TRUE (
				along with IBM and KANJI) 
                                 
                             C          INCLUDE COMEQU.ASM 
                             C  ;************************************* 
                             C  ; COMMAND EQUs which are not switch dependant 
                             C   
                             C  IFDEF   IBM 
                             C          INCLUDE IFEQU.ASM 
                             C  ;************************************* 
                             C  ; COMMAND EQUs which are switch dependant 
                             C   
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C   
 = 003E                      C  SYM     EQU     ">" 
                             C   
 = 0017                      C  LINPERPAG       EQU     23 
 = 0001                      C  NORMPERLIN      EQU     1 
 = 0005                      C  WIDEPERLIN      EQU     5 
 = 0080                      C  COMBUFLEN       EQU     128     ; Length of com
				mmand buffer 
                             C   
 = 003A                      C  DRVCHAR         EQU     ":" 
                             C   
 = 005C                      C  FCB     EQU     5CH 
                             C   
                             C  VARSTRUC        STRUC 
 0000  ??                    C  ISDIR   DB      ? 
 0001  ??                    C  SIZ     DB      ? 
 0002  ????                  C  TTAIL   DW      ? 
 0004  ??                    C  INFO    DB      ? 
 0005  0054[                 C  BUF     DB      DIRSTRLEN + 20 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0059                        C  VARSTRUC        ENDS 
                             C   
 = 0001                      C  WSWITCH EQU     1               ; Wide display 
				during DIR 
 = 0002                      C  PSWITCH EQU     2               ; Pause (or Pag
				e) mode during DIR 
 = 0004                      C  ASWITCH EQU     4               ; ASCII mode du
				ring COPY 
 = 0008                      C  BSWITCH EQU     8               ; Binary mode d
				uring COPY 
 = 0010                      C  VSWITCH EQU     10H             ; Verify switch
				 
 = 8000                      C  GOTSWITCH EQU   8000H           ; Meta switch s
				et if switch character encountered 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-62
DEVICE TABLE AND SRH DEFINITION                             

                                 
 0000                           CODERES SEGMENT PUBLIC 
 0000                           CODERES ENDS 
                                 
 0000                           DATARES SEGMENT PUBLIC BYTE 
                                        EXTRN   COMBAD:BYTE,NEEDCOM:BYTE,DRVMSG
				:BYTE 
                                        EXTRN   DEFMSG:BYTE,PROMPT:BYTE,EXECEME
				S:BYTE,EXEBAD:BYTE 
                                        EXTRN   TOOBIG:BYTE,NOCOM:BYTE,RBADNAM:
				BYTE,INT_2E_RET:DWORD 
                                        EXTRN   NOHANDMES:BYTE,BMEMMES:BYTE,HAL
				TMES:BYTE,FRETMES:BYTE 
                                        EXTRN   PARENT:WORD,HANDLE01:WORD,LOADI
				NG:BYTE,BATCH:WORD 
                                        EXTRN   TRNSEG:WORD,COMDRV:BYTE,MEMSIZ:
				WORD,SUM:WORD,EXTCOM:BYTE 
                                        EXTRN   IO_SAVE:WORD,PERMCOM:BYTE,SINGL
				ECOM:WORD,VERVAL:WORD 
                                        EXTRN   PIPEFLAG:BYTE,SAVE_PDB:WORD,COM
				SPEC:BYTE,TRANS:WORD 
                                        EXTRN   TRANVARS:BYTE,LTPA:WORD,RSWITCH
				AR:BYTE,RDIRCHAR:BYTE 
                                        EXTRN   RETCODE:WORD,FORFLAG:BYTE 
                                 
                                        IF      IBMVER 
                                        EXTRN   SYS_CALL:DWORD,ZEXEC:WORD,EXESE
				G:WORD,EXESUM:WORD 
                                        EXTRN   USER_SS:WORD,USER_SP:WORD 
                                        ENDIF 
                                 
 0000                           DATARES ENDS 
                                 
 0000                           ENVIRONMENT SEGMENT PUBLIC PARA        ; Defaul
				t COMMAND environment 
 0000                           ENVIRONMENT ENDS 
                                 
 0000                           INIT    SEGMENT PUBLIC PARA 
                                        EXTRN   CONPROC:NEAR 
 0000                           INIT    ENDS 
                                 
 0000                           TAIL    SEGMENT PUBLIC PARA 
 0000                           TAIL    ENDS 
                                 
 0000                           TRANCODE        SEGMENT PUBLIC PARA 
 0000                           TRANCODE        ENDS 
                                 
 0000                           TRANDATA        SEGMENT PUBLIC BYTE 
                                        EXTRN   TRANDATAEND:BYTE 
 0000                           TRANDATA        ENDS 
                                 
 0000                           TRANSPACE       SEGMENT PUBLIC BYTE 
                                        EXTRN   TRANSPACEEND:BYTE,HEADCALL:DWOR
				D 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-63
DEVICE TABLE AND SRH DEFINITION                             

 0000                           TRANSPACE       ENDS 
                                 
 0000                           TRANTAIL        SEGMENT PUBLIC PARA 
 0000                           TRANTAIL        ENDS 
                                 
 0000                           ZEXEC_CODE      SEGMENT PUBLIC PARA 
 0000                           ZEXEC_CODE      ENDS 
                                 
 0000                           ZEXEC_DATA      SEGMENT PUBLIC BYTE 
 0000                           ZEXEC_DATA      ENDS 
                                 
                                RESGROUP        GROUP   CODERES,DATARES,ENVIRON
				MENT,INIT,TAIL 
                                TRANGROUP       GROUP   TRANCODE,TRANDATA,TRANS
				PACE,TRANTAIL 
                                EGROUP          GROUP   ZEXEC_CODE,ZEXEC_DATA 
                                 
 0000                           ENVIRONMENT SEGMENT PUBLIC PARA        ; Defaul
				t COMMAND environment 
                                 
                                        PUBLIC  ECOMSPEC,ENVIREND,PATHSTRING 
                                 
 0000                                   ORG     0 
 0000  0010[                    ENVARENA DB     10H DUP (?)     ; Pad for mem a
				rena 
            ??                  
                         ]      
                                
 0010  50 41 54 48 3D           PATHSTRING DB   "PATH=" 
 0015                           USERPATH LABEL  BYTE 
                                 
 0015  00                               DB      0               ; Null path 
 0016  43 4F 4D 53 50 45 43             DB      "COMSPEC=" 
       3D                       
 001E  2F 43 4F 4D 4D 41 4E     ECOMSPEC DB     "/COMMAND.COM" 
       44 2E 43 4F 4D           
 002A  0086[                            DB      134 DUP (0) 
            00                  
                         ]      
                                
                                 
 00B0                           ENVIREND        LABEL   BYTE 
                                 
 = 00A0                         ENVIRONSIZ EQU  $-PATHSTRING 
 = 0092                         ENVIRONSIZ2 EQU $-ECOMSPEC 
 00B0                           ENVIRONMENT ENDS 
                                 
                                 
                                ; START OF RESIDENT PORTION 
                                 
 0000                           CODERES SEGMENT PUBLIC 
                                 
                                        PUBLIC  GETCOMDSK2,LODCOM,THEADFIX,CONT
				CTERM,LOADCOM,INT_2E,LODCOM1 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-64
DEVICE TABLE AND SRH DEFINITION                             

                                        PUBLIC  CHKSUM,SETVECT,EXT_EXEC,TREMCHE
				CK,RESTHAND,CONTC,RSTACK 
                                        PUBLIC  SAVHAND 
                                 
                                        IF      IBMVER 
                                        PUBLIC  EXECHK,SYSCALL,EXEC_WAIT 
                                        ENDIF 
                                 
                                ASSUME  CS:RESGROUP,DS:NOTHING,ES:NOTHING,SS:NO
				THING 
                                 
                                        EXTRN   RPRINT:NEAR,ASKEND:NEAR,DSKERR:
				NEAR 
                                 
                                 
 0000                                   ORG     0 
 = 0000                         ZERO    =       $ 
                                 
 0100                                   ORG     100H 
                                 
 0100                           PROGSTART: 
 0100  E9 0000 E                        JMP     RESGROUP:CONPROC 
                                 
 0103  007D[                            DB      (80H - 3) DUP (?) 
            ??                  
                         ]      
                                
 0180                           RSTACK  LABEL   WORD 
                                 
                                IF IBMVER 
 0180                           SYSCALL: 
 0180  80 FC 4B                         CMP     AH,EXEC 
 0183  74 05                            JZ      do_exec 
 0185  2E: FF 2E 0000 E                 JMP     DWORD PTR [SYS_CALL] 
                                 
 018A                           do_exec: 
 018A  06                               PUSH    ES 
 018B  1E                               PUSH    DS 
 018C  55                               PUSH    BP 
 018D  57                               PUSH    DI 
 018E  56                               PUSH    SI 
 018F  52                               PUSH    DX 
 0190  51                               PUSH    CX 
 0191  53                               PUSH    BX 
 0192  50                               PUSH    AX 
 0193  2E: 8C 16 0000 E                 MOV     [user_ss],SS 
 0198  2E: 89 26 0000 E                 MOV     [user_sp],SP 
                                ; 
                                ; are we running on RSTACK already? 
                                ; 
 019D  0E                               PUSH    CS 
 019E  5B                               POP     BX              ; BX <- CS 
 019F  16                               PUSH    SS 
 01A0  58                               POP     AX              ; AX <- SS 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-65
DEVICE TABLE AND SRH DEFINITION                             

 01A1  3B C3                            CMP     AX,BX           ; IF AX == BX t
				hen no stack switch! 
 01A3  74 05                            JZ      Get_mem 
 01A5  8E D3                            MOV     SS,BX 
                                ASSUME  SS:RESGROUP 
 01A7  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTACK 
                                 
 01AA                           Get_mem: 
 01AA  BB FFFF                          MOV     BX,0FFFFH       ; allocate all 
				of memory 
 01AD  B4 48                            MOV     AH,ALLOC 
 01AF  CD 21                            INT     int_command 
 01B1  B8 004D R                        MOV     AX,OFFSET EGROUP:ZEXECDATAEND +
				 15 
 01B4  B1 04                            MOV     CL,4 
 01B6  D3 E8                            SHR     AX,CL 
 01B8  8B C8                            MOV     CX,AX          ; Save in CX 
 01BA  3B D8                            CMP     BX,AX          ; enough for EXE
				C? 
 01BC  72 6D                            JB      EXECMER        ; nope... cry 
 01BE  B4 48                            MOV     AH,ALLOC 
 01C0  CD 21                            INT     int_command 
 01C2  72 67                            JC      EXECMER         ; Memory arenas
				 probably trashed 
 01C4  03 D8                            ADD     BX,AX 
 01C6  36: 89 1E 0000 E                 MOV     [MEMSIZ],BX 
 01CB  2B D9                            SUB     BX,CX 
 01CD  36: 89 1E 0000 E                 MOV     [EXESEG],BX     ; exec 
 01D2  8E C0                            MOV     ES,AX 
 01D4  B4 49                            MOV     AH,DEALLOC 
 01D6  CD 21                            INT     int_command 
 01D8  0E                               PUSH    CS 
 01D9  1F                               POP     DS 
                                ASSUME  DS:RESGROUP 
 01DA  E8 0251 R                        CALL    EXECHK 
 01DD  3B 16 0000 E                     CMP     DX,[EXESUM] 
 01E1  74 3B                            JZ      HAVEXEC         ; EXEC OK 
 01E3  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMSPEC 
 01E6  B8 3D00                          MOV     AX,OPEN SHL 8 
 01E9  CD 21                            INT     int_command             ; Open 
				COMMAND.COM 
 01EB  72 3E                            JC      EXECMER 
 01ED  8B D8                            MOV     BX,AX           ; Handle 
 01EF  BA 0000 R                        MOV     DX,OFFSET RESGROUP:TRANSTART 
 01F2  81 C2 FF00 R                     ADD     DX,OFFSET TRANGROUP:EXECSTART -
				 100H 
 01F6  33 C9                            XOR     CX,CX           ; Seek loc 
 01F8  B8 4200                          MOV     AX,LSEEK SHL 8 
 01FB  CD 21                            INT     int_command 
 01FD  B9 054E R                        MOV     CX,OFFSET EGROUP:ZEXECCODEEND 
 0200  8E 1E 0000 E                     MOV     DS,[EXESEG] 
                                ASSUME  DS:NOTHING 
 0204  B4 3F                            MOV     AH,READ 
 0206  CD 21                            INT     int_command 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-66
DEVICE TABLE AND SRH DEFINITION                             

 0208  50                               PUSH    AX 
 0209  B4 3E                            MOV     AH,CLOSE 
 020B  CD 21                            INT     int_command             ; Close
				 COMMAND.COM 
 020D  59                               POP     CX 
 020E  81 F9 054E R                     CMP     CX,OFFSET EGROUP:ZEXECCODEEND 
 0212  75 17                            JNZ     EXECMER         ; Size matched 
                                 
 0214  E8 0251 R                        CALL    EXECHK 
 0217  36: 3B 16 0000 E                 CMP     DX,[EXESUM] 
 021C  75 0D                            JNZ     EXECMER 
 021E                           HAVEXEC: 
 021E  36: C6 06 0000 E 00              MOV     [LOADING],0             ; Flag 
				to DSKERR 
 0224  36: FF 1E 0000 E                 CALL    DWORD PTR [ZEXEC] 
 0229  EB 12                            JMP     SHORT EXECRET 
 022B                           execmer: 
 022B  36: C5 36 0000 E                 LDS     SI,DWORD PTR [user_Sp] 
 0230  C7 04 0008                       MOV     [SI.user_AX],exec_not_enough_me
				mory 
 0234  FF 74 16                         PUSH    [SI.user_F] 
 0237  9D                               POPF 
 0238  F9                               STC 
 0239  9C                               PUSHF 
 023A  8F 44 16                         POP     [SI.user_F] 
 023D                           execret: 
 023D  36: 8E 16 0000 E                 MOV     SS,[user_SS] 
                                ASSUME  SS:NOTHING 
 0242  2E: 8B 26 0000 E                 MOV     SP,[user_SP] 
 0247  58                               POP     AX              ; PUSH    ES 
 0248  5B                               POP     BX              ; PUSH    DS 
 0249  59                               POP     CX              ; PUSH    BP 
 024A  5A                               POP     DX              ; PUSH    DI 
 024B  5E                               POP     SI              ; PUSH    SI 
 024C  5F                               POP     DI              ; PUSH    DX 
 024D  5D                               POP     BP              ; PUSH    CX 
 024E  1F                               POP     DS              ; PUSH    BX 
 024F  07                               POP     ES              ; PUSH    AX 
 0250  CF                               IRET 
                                 
 0251                           EXECHK: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0251  1E                               PUSH    DS 
 0252  2E: 8E 1E 0000 E                 MOV     DS,[EXESEG] 
 0257  B9 054E R                        MOV     CX,OFFSET EGROUP:ZEXECCODEEND 
 025A  33 F6                            XOR     SI,SI 
 025C  E9 0592 R                        JMP     CHECK_SUM 
                                ENDIF 
                                 
 025F                           EXEC_ERR:                       ; Select the co
				rrect error message 
 025F  BA 0000 E                        MOV     DX,OFFSET RESGROUP:RBADNAM 
 0262  3D 0002                          CMP     AX,exec_file_not_found 
 0265  74 18                            JZ      GOTEXECEMES 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-67
DEVICE TABLE AND SRH DEFINITION                             

 0267  3D 0005                          CMP     AX,error_access_denied 
 026A  74 13                            JZ      GOTEXECEMES 
 026C  BA 0000 E                        MOV     DX,OFFSET RESGROUP:TOOBIG 
 026F  3D 0008                          CMP     AX,exec_not_enough_memory 
 0272  74 0B                            JZ      GOTEXECEMES 
 0274  BA 0000 E                        MOV     DX,OFFSET RESGROUP:EXEBAD 
 0277  3D 000B                          CMP     AX,exec_bad_format 
 027A  74 03                            JZ      GOTEXECEMES 
 027C  BA 0000 E                        MOV     DX,OFFSET RESGROUP:EXECEMES 
 027F                           GOTEXECEMES: 
 027F  0E                               PUSH    CS 
 0280  1F                               POP     DS 
 0281  E8 0000 E                        CALL    RPRINT 
 0284  EB 13                            JMP     SHORT NOEXEC 
                                 
 0286                           EXT_EXEC: 
                                ; 
                                ; we are now running in free space.  anything w
				e do from here 
                                ; on may get trashed.  Move the stack (also in 
				free space) to 
                                ; allocated space because since EXEC restores t
				he stack, 
                                ; somebody may trash what is on the stack. 
                                ; 
 0286  8C C9                            MOV     CX,CS 
 0288  8E D1                            MOV     SS,CX 
 028A  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTACK 
                                ; 
                                ; Oops!! We have to make sure that the EXEC cod
				e doesn't blop a newstack! 
                                ; 
                                ; 
 028D  CD 21                            INT     int_command     ; Do the EXEC 
 028F  72 CE                            JC      EXEC_ERR        ; EXEC failed 
 0291                           EXEC_WAIT: 
 0291  B4 4D                            MOV     AH,WAIT 
 0293  CD 21                            INT     int_command     ; Get the retur
				n code 
 0295  2E: A3 0000 E                    MOV     [RETCODE],AX 
 0299                           NOEXEC: 
 0299  E9 0374 R                        JMP     LODCOM 
                                 
 029C                           CONTC: 
 029C  FB                               STI 
 029D  8C C8                            MOV     AX,CS 
 029F  8E D8                            MOV     DS,AX 
                                ASSUME  DS:RESGROUP 
 02A1  B4 0D                            MOV     AH,DISK_RESET 
 02A3  CD 21                            INT     int_command     ; Reset disks i
				n case files were open 
 02A5  F7 06 0000 E FFFF                TEST    [BATCH],-1 
 02AB  74 03                            JZ      CONTCTERM 
 02AD  E9 0000 E                        JMP     ASKEND          ; See if user w
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-68
DEVICE TABLE AND SRH DEFINITION                             

				ants to terminate batch 
 02B0                           CONTCTERM: 
 02B0  33 ED                            XOR     BP,BP           ; Indicate no r
				ead 
 02B2  C6 06 0000 E 00                  MOV     [FORFLAG],0     ; Turn off for 
				processing 
 02B7  C6 06 0000 E 00                  MOV     [PIPEFLAG],0    ; Turn off any 
				pipe 
 02BC  83 3E 0000 E 00                  CMP     [SINGLECOM],0   ; See if we nee
				d to set SINGLECOM 
 02C1  74 06                            JZ      NOSETSING 
 02C3  C7 06 0000 E FFFF                MOV     [SINGLECOM],-1  ; Cause termina
				tion on pipe, batch, for 
 02C9                           NOSETSING: 
 02C9  80 3E 0000 E 00                  CMP     [EXTCOM],0 
 02CE  75 03                            JNZ     DODAB           ; Internal ^C 
 02D0  E9 03CF R                        JMP     LODCOM1 
 02D3                           DODAB: 
 02D3  F9                               STC                     ; Tell DOS to a
				bort 
 02D4                           ZZY     PROC    FAR 
 02D4  CB                               RET                     ; Leave flags o
				n stack 
                                ZZY     ENDP 
                                 
 02D5                           BADMEMERR:                              ; Alloc
				ation error loading transient 
 02D5  BA 0000 E                        MOV     DX,OFFSET RESGROUP:BMEMMES 
 02D8                           FATALC: 
 02D8  0E                               PUSH    CS 
 02D9  1F                               POP     DS 
 02DA  E8 0000 E                        CALL    RPRINT 
 02DD  80 3E 0000 E 00                  CMP     [PERMCOM],0 
 02E2  74 0F                            JZ      FATALRET 
 02E4  83 3E 0000 E 00                  CMP     [SINGLECOM],0                  
				 ; If PERMCOM and SINGLECOM 
 02E9  75 08                            JNZ     FATALRET                       
				 ; Must take INT_2E exit 
 02EB  BA 0000 E                        MOV     DX,OFFSET RESGROUP:HALTMES 
 02EE  E8 0000 E                        CALL    RPRINT 
 02F1                           STALL: 
 02F1  EB FE                            JMP     STALL                          
				 ; Crash the system nicely 
                                 
 02F3                           FATALRET: 
 02F3  BA 0000 E                        MOV     DX,OFFSET RESGROUP:FRETMES 
 02F6  E8 0000 E                        CALL    RPRINT 
 02F9                           FATALRET2: 
 02F9  80 3E 0000 E 00                  CMP     [PERMCOM],0                    
				 ; If we get here and PERMCOM, 
 02FE  75 16                            JNZ     RET_2E                         
				 ; must be INT_2E 
                                IF IBM 
 0300  C5 16 0000 E                     LDS     DX,DWORD PTR [SYS_CALL] 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-69
DEVICE TABLE AND SRH DEFINITION                             

                                ASSUME  DS:NOTHING 
 0304  B8 2521                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 + INT_COMMAND 
 0307  CD 21                            INT     int_command 
                                ENDIF 
 0309  2E: A1 0000 E                    MOV     AX,[PARENT] 
 030D  2E: A3 0016                      MOV     WORD PTR CS:[PDB_Parent_PID],AX
				 
 0311  B8 4C00                          MOV     AX,(EXIT SHL 8)                
				 ; Return to lower level 
 0314  CD 21                            INT     int_command 
                                 
 0316                           RET_2E: 
 0316  0E                               PUSH    CS 
 0317  1F                               POP     DS 
                                ASSUME  DS:RESGROUP,ES:NOTHING,SS:NOTHING 
 0318  C7 06 0000 E 0000                MOV     [SINGLECOM],0   ; Turn off sing
				lecom 
 031E  8E 06 0000 E                     MOV     ES,[LTPA] 
 0322  B4 49                            MOV     AH,DEALLOC 
 0324  CD 21                            INT     int_command             ; Free 
				up space used by transient 
 0326  8B 1E 0000 E                     MOV     BX,[SAVE_PDB] 
 032A  B4 50                            MOV     AH,SET_CURRENT_PDB 
 032C  CD 21                            INT     int_command             ; Curre
				nt process is user 
 032E  A1 0000 E                        MOV     AX,[RETCODE] 
 0331  80 3E 0000 E 00                  CMP     [EXTCOM],0 
 0336  75 02                            JNZ     GOTECODE 
 0338  33 C0                            XOR     AX,AX           ; Internals alw
				ays return 0 
 033A                           GOTECODE: 
 033A  C6 06 0000 E 01                  MOV     [EXTCOM],1      ; Force externa
				l 
 033F  FF 2E 0000 E                     JMP     [INT_2E_RET]    ;"IRET" 
                                 
 0343                           INT_2E:                         ; Magic command
				 executer 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0343  2E: 8F 06 0000 E                 POP     WORD PTR [INT_2E_RET] 
 0348  2E: 8F 06 0002 E                 POP     WORD PTR [INT_2E_RET+2]    ;Get
				 return address 
 034D  58                               POP     AX              ;Chuck flags 
 034E  0E                               PUSH    CS 
 034F  07                               POP     ES 
 0350  BF 0080                          MOV     DI,80H 
 0353  B9 0040                          MOV     CX,64 
 0356  F3/ A5                           REP     MOVSW 
 0358  B4 51                            MOV     AH,GET_CURRENT_PDB 
 035A  CD 21                            INT     int_command             ; Get u
				ser's header 
 035C  2E: 89 1E 0000 E                 MOV     [SAVE_PDB],BX 
 0361  B4 50                            MOV     AH,SET_CURRENT_PDB 
 0363  8C CB                            MOV     BX,CS 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-70
DEVICE TABLE AND SRH DEFINITION                             

 0365  CD 21                            INT     int_command             ; Curre
				nt process is me 
 0367  2E: C7 06 0000 E 0081            MOV     [SINGLECOM],81H 
 036E  2E: C6 06 0000 E 01              MOV     [EXTCOM],1      ; Make sure thi
				s case forced 
                                 
 0374                           LODCOM:                         ; Termination h
				andler 
 0374  2E: 80 3E 0000 E 00              CMP     [EXTCOM],0 
 037A  74 53                            JZ      LODCOM1         ; If internal, 
				memory already allocated 
 037C  BB FFFF                          MOV     BX,0FFFFH 
 037F  B4 48                            MOV     AH,ALLOC 
 0381  CD 21                            INT     int_command 
 0383  B8 000F E                        MOV     AX,OFFSET TRANGROUP:TRANSPACEEN
				D + 15 
 0386  B1 04                            MOV     CL,4 
 0388  D3 E8                            SHR     AX,CL 
                                 
                                        IF      IBM 
 038A  50                               PUSH    AX 
 038B  B8 004D R                        MOV     AX,OFFSET EGROUP:ZEXECDATAEND +
				 15 
 038E  B1 04                            MOV     CL,4 
 0390  D3 E8                            SHR     AX,CL 
 0392  59                               POP     CX 
 0393  03 C1                            ADD     AX,CX 
                                        ENDIF 
                                 
 0395  05 0020                          ADD     AX,20H 
 0398  3B D8                            CMP     BX,AX           ; Is less than 
				512 byte buffer worth it? 
 039A  73 03                            JNC     MEMOK 
 039C                           BADMEMERRJ: 
 039C  E9 02D5 R                        JMP BADMEMERR           ; Not enough me
				mory 
 039F                           MEMOK: 
 039F  B4 48                            MOV     AH,ALLOC 
 03A1  CD 21                            INT     int_command 
 03A3  72 F7                            JC      BADMEMERRJ      ; Memory arenas
				 probably trashed 
 03A5  2E: C6 06 0000 E 00              MOV     [EXTCOM],0      ; Flag not to A
				LLOC again 
 03AB  2E: A3 0000 E                    MOV     [LTPA],AX       ; New TPA is ba
				se just allocated 
 03AF  03 D8                            ADD     BX,AX 
 03B1  2E: 89 1E 0000 E                 MOV     [MEMSIZ],BX 
                                 
 03B6  B8 000F E                        MOV     AX,OFFSET TRANGROUP:TRANSPACEEN
				D + 15 
 03B9  B1 04                            MOV     CL,4 
 03BB  D3 E8                            SHR     AX,CL 
                                 
                                        IF      IBM 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-71
DEVICE TABLE AND SRH DEFINITION                             

 03BD  50                               PUSH    AX 
 03BE  B8 004D R                        MOV     AX,OFFSET EGROUP:ZEXECDATAEND +
				 15 
 03C1  B1 04                            MOV     CL,4 
 03C3  D3 E8                            SHR     AX,CL 
 03C5  59                               POP     CX 
 03C6  03 C1                            ADD     AX,CX 
                                        ENDIF 
                                 
 03C8  2B D8                            SUB     BX,AX 
 03CA  2E: 89 1E 0000 E                 MOV     [TRNSEG],BX     ; Transient sta
				rts here 
 03CF                           LODCOM1: 
 03CF  8C C8                            MOV     AX,CS 
 03D1  8E D0                            MOV     SS,AX 
                                ASSUME  SS:RESGROUP 
 03D3  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTACK 
 03D6  8E D8                            MOV     DS,AX 
                                ASSUME  DS:RESGROUP 
 03D8  E8 048E R                        CALL    HEADFIX     ; Make sure files c
				losed stdin and stdout restored 
 03DB  33 ED                            XOR     BP,BP           ; Flag command 
				ok 
 03DD  B8 FFFF                          MOV     AX,-1 
 03E0  87 06 0000 E                     XCHG    AX,[VERVAL] 
 03E4  3D FFFF                          CMP     AX,-1 
 03E7  74 04                            JZ      NOSETVER 
 03E9  B4 2E                            MOV     AH,SET_VERIFY_ON_WRITE  ; AL ha
				s correct value 
 03EB  CD 21                            INT     int_command 
 03ED                           NOSETVER: 
 03ED  83 3E 0000 E FF                  CMP     [SINGLECOM],-1 
 03F2  75 03                            JNZ     NOSNG 
 03F4  E9 02F9 R                        JMP     FATALRET2       ; We have finis
				hed the single command 
 03F7                           NOSNG: 
 03F7  E8 059E R                        CALL    SETVECT 
                                 
                                IF IBMVER 
 03FA  E8 0251 R                        CALL    EXECHK          ; Check exe loa
				der 
 03FD  3B 16 0000 E                     CMP     DX,[EXESUM] 
 0401  75 09                            JNZ     BOGUS_COM 
                                ENDIF 
                                 
 0403  E8 0587 R                        CALL    CHKSUM          ; Check the tra
				nsient 
 0406  3B 16 0000 E                     CMP     DX,[SUM] 
 040A  74 1F                            JZ      HAVCOM          ; Transient OK 
 040C                           BOGUS_COM: 
 040C  C6 06 0000 E 01                  MOV     [LOADING],1     ; Flag DSKERR r
				outine 
 0411  E8 052D R                        CALL    LOADCOM 
 0414                           CHKSAME: 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-72
DEVICE TABLE AND SRH DEFINITION                             

                                 
                                IF IBMVER 
 0414  E8 0251 R                        CALL    EXECHK 
 0417  3B 16 0000 E                     CMP     DX,[EXESUM] 
 041B  75 09                            JNZ     ALSO_BOGUS 
                                ENDIF 
                                 
 041D  E8 0587 R                        CALL    CHKSUM 
 0420  3B 16 0000 E                     CMP     DX,[SUM] 
 0424  74 05                            JZ      HAVCOM          ; Same COMMAND 
 0426                           ALSO_BOGUS: 
 0426  E8 057F R                        CALL    WRONGCOM 
 0429  EB E9                            JMP     SHORT CHKSAME 
 042B                           HAVCOM: 
 042B  B8 3700                          MOV     AX,CHAR_OPER SHL 8 
 042E  CD 21                            INT     int_command 
 0430  88 16 0000 E                     MOV     [RSWITCHAR],DL 
 0434  80 FA 2F                         CMP     DL,'/' 
 0437  75 05                            JNZ     USESLASH 
 0439  C6 06 0000 E 5C                  MOV     [RDIRCHAR],'\'          ; Selec
				t alt path separator 
 043E                           USESLASH: 
 043E  C6 06 0000 E 00                  MOV     [LOADING],0             ; Flag 
				to DSKERR 
 0443  BE 0000 E                        MOV     SI,OFFSET RESGROUP:TRANVARS 
 0446  BF 0000 E                        MOV     DI,OFFSET TRANGROUP:HEADCALL 
 0449  8E 06 0000 E                     MOV     ES,[TRNSEG] 
 044D  FC                               CLD 
 044E  B9 0008                          MOV     CX,8 
 0451  F3/ A5                           REP     MOVSW                   ; Trans
				fer INFO to transient 
 0453  A1 0000 E                        MOV     AX,[MEMSIZ] 
 0456  A3 0002                          MOV     WORD PTR DS:[PDB_block_len],AX 
				 ; Adjust my own header 
 0459  FF 2E 0000 E                     JMP     DWORD PTR [TRANS] 
                                 
                                ; Far call to REMCHECK for TRANSIENT 
 045D                           TREMCHECK PROC   FAR 
 045D  E8 0461 R                        CALL    REMCHECK 
 0460  CB                               RET 
                                TREMCHECK ENDP 
                                 
 0461                           REMCHECK: 
                                ;All registers preserved. Returns zero if media
				 removable, NZ if fixed 
                                ; AL is drive (0=DEF, 1=A,...) 
                                        IF      IBM 
 0461  50                               PUSH    AX 
 0462  0A C0                            OR      AL,AL 
 0464  75 06                            JNZ     GOTDRV2 
 0466  B4 19                            MOV     AH,GET_DEFAULT_DRIVE 
 0468  CD 21                            INT     int_command 
 046A  FE C0                            INC     AL              ;A=1 
 046C                           GOTDRV2: 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-73
DEVICE TABLE AND SRH DEFINITION                             

 046C  53                               PUSH    BX 
 046D  8A D8                            MOV     BL,AL 
 046F  CD 11                            INT     11H             ;IBM EQUIP CALL
				 
 0471  D0 C0                            ROL     AL,1 
 0473  D0 C0                            ROL     AL,1 
 0475  24 03                            AND     AL,3 
 0477  75 02                            JNZ     NOT_SINGLE 
 0479  FE C0                            INC     AL 
 047B                           NOT_SINGLE: 
 047B  FE C0                            INC     AL              ; AL is now MAX
				 floppy # 
 047D  3A D8                            CMP     BL,AL 
 047F  5B                               POP     BX 
 0480  76 04                            JBE     SETREM          ; Is an IBM flo
				ppy and so is removable 
 0482  0A C0                            OR      AL,AL           ; Know AL is no
				n-zero 
 0484  EB 02                            JMP     SHORT SETNREM 
 0486                           SETREM: 
                                        ENDIF 
                                 
 0486  33 C0                            XOR     AX,AX           ;Zero 
                                 
                                        IF      IBM 
 0488                           SETNREM: 
                                        ENDIF 
                                 
 0488  58                               POP     AX 
 0489  C3                               RET 
                                 
                                ; Far call to HEADFIX for TRANSIENT 
 048A                           THEADFIX PROC   FAR 
 048A  E8 048E R                        CALL    HEADFIX 
 048D  CB                               RET 
                                THEADFIX ENDP 
                                 
 048E                           HEADFIX: 
 048E  33 DB                            XOR     BX,BX           ; Clean up head
				er 
 0490  8B 0E 0000 E                     MOV     CX,[IO_SAVE] 
 0494  8B 16 0018                       MOV     DX,WORD PTR DS:[PDB_JFN_Table] 
 0498  3A CA                            CMP     CL,DL 
 049A  74 08                            JZ      CHK1            ; Stdin matches
				 
 049C  B4 3E                            MOV     AH,CLOSE 
 049E  CD 21                            INT     int_command 
 04A0  88 0E 0018                       MOV     DS:[PDB_JFN_Table],CL   ; Resto
				re stdin 
 04A4                           CHK1: 
 04A4  43                               INC     BX 
 04A5  3A EE                            CMP     CH,DH           ; Stdout matche
				s 
 04A7  74 08                            JZ      CHKOTHERHAND 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-74
DEVICE TABLE AND SRH DEFINITION                             

 04A9  B4 3E                            MOV     AH,CLOSE 
 04AB  CD 21                            INT     int_command 
 04AD  88 2E 0019                       MOV     DS:[PDB_JFN_Table+1],CH ; Resto
				re stdout 
 04B1                           CHKOTHERHAND: 
 04B1  83 C3 04                         ADD     BX,4                    ; Skip 
				2,3,4 
 04B4  B9 000F                          MOV     CX,FilPerProc - 5       ; Alrea
				dy done 0,1,2,3,4 
 04B7                           CLOSELOOP: 
 04B7  B4 3E                            MOV     AH,CLOSE 
 04B9  CD 21                            INT     int_command 
 04BB  43                               INC     BX 
 04BC  E2 F9                            LOOP    CLOSELOOP 
 04BE  C3                               RET 
                                 
 04BF                           SAVHAND: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 04BF  1E                               PUSH    DS 
 04C0  53                               PUSH    BX              ; Set stdin to 
				sterr, stdout to stderr 
 04C1  50                               PUSH    AX 
 04C2  B4 51                            MOV     AH,GET_CURRENT_PDB 
 04C4  CD 21                            INT     int_command             ; Get u
				ser's header 
 04C6  8E DB                            MOV     DS,BX 
 04C8  A1 0018                          MOV     AX,WORD PTR DS:[PDB_JFN_Table] 
 04CB  2E: A3 0000 E                    MOV     [HANDLE01],AX           ; Save 
				user's stdin, stdout 
 04CF  A0 001A                          MOV     AL,DS:[PDB_JFN_Table+2] 
 04D2  8A E0                            MOV     AH,AL 
 04D4  A3 0018                          MOV     WORD PTR DS:[PDB_JFN_Table],AX 
				  ; Dup stderr 
 04D7  58                               POP     AX 
 04D8  5B                               POP     BX 
 04D9  1F                               POP     DS 
 04DA  C3                               RET 
                                 
                                ASSUME  DS:RESGROUP 
 04DB                           GETCOMDSK2: 
 04DB  E8 04FA R                        CALL    GETCOMDSK 
 04DE  E9 03CF R                        JMP     LODCOM1         ; Memory alread
				y allocated 
                                 
 04E1                           RESTHAND: 
 04E1  1E                               PUSH    DS 
 04E2  53                               PUSH    BX              ; Restore stdin
				, stdout to user 
 04E3  50                               PUSH    AX 
 04E4  B4 51                            MOV     AH,GET_CURRENT_PDB 
 04E6  CD 21                            INT     int_command             ; Point
				 to user's header 
 04E8  A1 0000 E                        MOV     AX,[HANDLE01] 
 04EB  8E DB                            MOV     DS,BX 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-75
DEVICE TABLE AND SRH DEFINITION                             

                                ASSUME DS:NOTHING 
 04ED  A3 0018                          MOV     WORD PTR DS:[PDB_JFN_Table],AX 
				  ; Stuff his old 0 and 1 
 04F0  58                               POP     AX 
 04F1  5B                               POP     BX 
 04F2  1F                               POP     DS 
 04F3  C3                               RET 
                                ASSUME DS:RESGROUP,SS:RESGROUP 
                                 
 04F4                           HOPELESS: 
 04F4  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NOCOM 
 04F7  E9 02D8 R                        JMP     FATALC 
                                 
 04FA                           GETCOMDSK: 
 04FA  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NEEDCOM 
 04FD                           GETCOMDSK3: 
 04FD  A0 0000 E                        MOV     AL,[COMDRV] 
 0500  E8 0461 R                        CALL    REMCHECK 
 0503  75 EF                            JNZ     HOPELESS                ;Non-re
				movable media 
 0505  E8 0000 E                        CALL    RPRINT 
 0508  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DRVMSG 
 050B  80 3E 0000 E 00                  CMP     [COMDRV],0 
 0510  75 03                            JNZ     GETCOM1 
 0512  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DEFMSG 
 0515                           GETCOM1: 
 0515  E8 0000 E                        CALL    RPRINT 
 0518  BA 0000 E                        MOV     DX,OFFSET RESGROUP:PROMPT 
 051B  E8 0000 E                        CALL    RPRINT 
 051E  E8 0522 R                        CALL    GetRawFlushedByte 
 0521  C3                               RET 
                                 
                                ; flush world and get raw input 
 0522                           GetRawFlushedByte: 
 0522  B8 0C07                          MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) 
				OR RAW_CON_INPUT 
 0525  CD 21                            INT     int_command             ; Get c
				har without testing or echo 
 0527  B8 0C00                          MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) 
				+ 0 
 052A  CD 21                            INT     int_command 
                                        return 
 052C                         1 ??0000:
 052C  C3                     1  RET
                                 
 052D                           LOADCOM:                        ; Load in trans
				ient 
 052D  45                               INC     BP              ; Flag command 
				read 
 052E  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMSPEC 
 0531  B8 3D00                          MOV     AX,OPEN SHL 8 
 0534  CD 21                            INT     int_command             ; Open 
				COMMAND.COM 
 0536  73 10                            JNC     READCOM 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-76
DEVICE TABLE AND SRH DEFINITION                             

 0538  3D 0004                          CMP     AX,open_too_many_open_files 
 053B  75 06                            JNZ     TRYDOOPEN 
 053D  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NOHANDMES 
 0540  E9 02D8 R                        JMP     FATALC          ; Fatal, will n
				ever find a handle 
                                 
 0543                           TRYDOOPEN: 
 0543  E8 04FA R                        CALL    GETCOMDSK 
 0546  EB E5                            JMP     SHORT LOADCOM 
                                 
 0548                           READCOM: 
 0548  8B D8                            MOV     BX,AX           ; Handle 
 054A  BA 0000 R                        MOV     DX,OFFSET RESGROUP:TRANSTART 
 054D  33 C9                            XOR     CX,CX           ; Seek loc 
 054F  B8 4200                          MOV     AX,LSEEK SHL 8 
 0552  CD 21                            INT     int_command 
 0554  72 1B                            JC      WRONGCOM1 
 0556  B9 FF00 E                        MOV     CX,OFFSET TRANGROUP:TRANSPACEEN
				D - 100H 
                                 
                                        IF      IBM 
 0559  83 C1 0F                         ADD     CX,15 
 055C  81 E1 FFF0                       AND     CX,0FFF0H 
 0560  81 C1 054E R                     ADD     CX,OFFSET EGROUP:ZEXECCODEEND 
                                        ENDIF 
                                 
 0564  1E                               PUSH    DS 
 0565  8E 1E 0000 E                     MOV     DS,[TRNSEG] 
                                ASSUME  DS:NOTHING 
 0569  BA 0100                          MOV     DX,100H 
 056C  B4 3F                            MOV     AH,READ 
 056E  CD 21                            INT     int_command 
 0570  1F                               POP     DS 
                                ASSUME  DS:RESGROUP 
 0571                           WRONGCOM1: 
 0571  9C                               PUSHF 
 0572  50                               PUSH    AX 
 0573  B4 3E                            MOV     AH,CLOSE 
 0575  CD 21                            INT     int_command             ; Close
				 COMMAND.COM 
 0577  58                               POP     AX 
 0578  9D                               POPF 
 0579  72 04                            JC      WRONGCOM        ; If error on R
				EAD 
 057B  3B C1                            CMP     AX,CX 
 057D  74 1E                            JZ      RET10           ; Size matched 
 057F                           WRONGCOM: 
 057F  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMBAD 
 0582  E8 04FD R                        CALL    GETCOMDSK3 
 0585  EB A6                            JMP     SHORT LOADCOM   ; Try again 
                                 
 0587                           CHKSUM:                         ; Compute trans
				ient checksum 
 0587  1E                               PUSH    DS 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-77
DEVICE TABLE AND SRH DEFINITION                             

 0588  8E 1E 0000 E                     MOV     DS,[TRNSEG] 
 058C  BE 0100                          MOV     SI,100H 
 058F  B9 FF00 E                        MOV     CX,OFFSET TRANGROUP:TRANDATAEND
				 - 100H 
                                 
 0592                           CHECK_SUM: 
 0592  FC                               CLD 
 0593  D1 E9                            SHR     CX,1 
 0595  33 D2                            XOR     DX,DX 
 0597                           CHK: 
 0597  AD                               LODSW 
 0598  03 D0                            ADD     DX,AX 
 059A  E2 FB                            LOOP    CHK 
 059C  1F                               POP     DS 
 059D  C3                       RET10:  RET 
                                 
 059E                           SETVECT:                        ; Set useful ve
				ctors 
 059E  BA 0374 R                        MOV     DX,OFFSET RESGROUP:LODCOM 
 05A1  B8 2522                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 22H        ; Set Terminate address 
 05A4  CD 21                            INT     int_command 
 05A6  BA 029C R                        MOV     DX,OFFSET RESGROUP:CONTC 
 05A9  B8 2523                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 23H        ; Set Ctrl-C address 
 05AC  CD 21                            INT     int_command 
 05AE  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DSKERR 
 05B1  B8 2524                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 24H        ; Set Hard Disk Error address 
 05B4  CD 21                            INT     int_command 
 05B6  C3                               RET 
                                 
 05B7                           CODERES ENDS 
                                 
                                ; This TAIL segment is used to produce a PARA a
				ligned label in the resident 
                                ; group which is the location where the transie
				nt segments will be loaded 
                                ; initial. 
                                 
 0000                           TAIL    SEGMENT PUBLIC PARA 
 0000                                   ORG     0 
 0000                           TRANSTART       LABEL   WORD 
 0000                           TAIL    ENDS 
                                 
                                ; This TAIL segment is used to produce a PARA a
				ligned label in the transient 
                                ; group which is the location where the exec se
				gments will be loaded 
                                ; initial. 
                                 
 0000                           TRANTAIL    SEGMENT PUBLIC PARA 
 0000                                   ORG     0 
 0000                           EXECSTART   LABEL   WORD 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-78
DEVICE TABLE AND SRH DEFINITION                             

 0000                           TRANTAIL    ENDS 
                                 
                                IF IBMVER 
                             C          INCLUDE EXEC.ASM 
                             C  SUBTTL $exec - load/go a program 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-79
$exec - load/go a program                                   

                             C  PAGE 
                             C  ; 
                             C  ; Assembler usage: 
                             C  ;           LDS     DX, name 
                             C  ;           LES     BX, blk 
                             C  ;           MOV     AH, Exec 
                             C  ;           MOV     AL, func 
                             C  ;           INT     int_command 
                             C  ; 
                             C  ;       AL  Function 
                             C  ;       --  -------- 
                             C  ;        0  Load and execute the program. 
                             C  ;        1  Load, create  the  program  header 
				 but  do  not 
                             C  ;           begin execution. 
                             C  ;        3  Load overlay. No header created. 
                             C  ; 
                             C  ;           AL = 0 -> load/execute program 
                             C  ; 
                             C  ;           +---------------------------+ 
                             C  ;           | WORD segment address of   | 
                             C  ;           | environment.              | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD pointer to ASCIZ    | 
                             C  ;           | command line at 80h       | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD pointer to default  | 
                             C  ;           | FCB to be passed at 5Ch   | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD pointer to default  | 
                             C  ;           | FCB to be passed at 6Ch   | 
                             C  ;           +---------------------------+ 
                             C  ; 
                             C  ;           AL = 1 -> load program 
                             C  ; 
                             C  ;           +---------------------------+ 
                             C  ;           | WORD segment address of   | 
                             C  ;           | environment.              | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD pointer to ASCIZ    | 
                             C  ;           | command line at 80h       | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD pointer to default  | 
                             C  ;           | FCB to be passed at 5Ch   | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD pointer to default  | 
                             C  ;           | FCB to be passed at 6Ch   | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD returned value of   | 
                             C  ;           | CS:IP                     | 
                             C  ;           +---------------------------+ 
                             C  ;           | DWORD returned value of   | 
                             C  ;           | SS:IP                     | 
                             C  ;           +---------------------------+ 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-80
$exec - load/go a program                                   

                             C  ; 
                             C  ;           AL = 3 -> load overlay 
                             C  ; 
                             C  ;           +---------------------------+ 
                             C  ;           | WORD segment address where| 
                             C  ;           | file will be loaded.      | 
                             C  ;           +---------------------------+ 
                             C  ;           | WORD relocation factor to | 
                             C  ;           | be applied to the image.  | 
                             C  ;           +---------------------------+ 
                             C  ; 
                             C  ; Returns: 
                             C  ;           AX = exec_invalid_function 
                             C  ;              = exec_bad_format 
                             C  ;              = exec_bad_environment 
                             C  ;              = exec_not_enough_memory 
                             C  ;              = exec_file_not_found 
                             C  ; 
                             C   
                             C  IF IBM 
 0000                        C  ZEXEC_DATA  SEGMENT PUBLIC BYTE 
 = 0000                      C  ZERO =   $ 
                             C  ENDIF 
                             C   
 0000  ????????              C  exec_blk            DD  ? 
 0004  ??                    C  exec_func           DB  ? 
 0005  ????                  C  exec_fh             DW  ? 
 0007  ????                  C  exec_rel_fac        DW  ? 
 0009  ????                  C  exec_res_len_para   DW  ? 
 000B  ????                  C  exec_init_IP        DW  ? 
 000D  ????                  C  exec_init_CS        DW  ? 
 000F  ????                  C  exec_init_SP        DW  ? 
 0011  ????                  C  exec_init_SS        DW  ? 
 0013  ????                  C  exec_environ        DW  ? 
 0015  ????                  C  exec_size           DW  ? 
 0017  ????                  C  exec_load_block     DW  ? 
                             C   
 0019  ??                    C  exec_load_high      DB  ? 
                             C   
 = 001A                      C  exec_internal_buffer    EQU $ 
 001A  ????                  C  exec_signature      DW  ?               ; must 
				contain 4D5A  (yay zibo!) 
 001C  ????                  C  exec_len_mod_512    DW  ?               ; low 9
				 bits of length 
 001E  ????                  C  exec_pages          DW  ?               ; numbe
				r of 512b pages in file 
 0020  ????                  C  exec_rle_count      DW  ?               ; count
				 of reloc entries 
 0022  ????                  C  exec_par_dir        DW  ?               ; numbe
				r of paragraphs before image 
 0024  ????                  C  exec_min_BSS        DW  ?               ; minim
				um number of para of BSS 
 0026  ????                  C  exec_max_BSS        DW  ?               ; max n
				umber of para of BSS 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-81
$exec - load/go a program                                   

 0028  ????                  C  exec_SS             DW  ?               ; stack
				 of image 
 002A  ????                  C  exec_SP             DW  ?               ; SP of
				 image 
 002C  ????                  C  exec_chksum         DW  ?               ; check
				sum  of file (ignored) 
 002E  ????                  C  exec_IP             DW  ?               ; IP of
				 entry 
 0030  ????                  C  exec_CS             DW  ?               ; CS of
				 entry 
 0032  ????                  C  exec_rle_table      DW  ?               ; byte 
				offset of reloc table 
 0034  ????                  C  exec_iov            DW  ?               ; overl
				ay number (0 for root) 
 0036  ????                  C  exec_dma            DW  ? 
 = 001E                      C  exec_internal_buffer_size   EQU $-exec_internal
				_buffer 
                             C   
                             C  IF IBM 
 0038  ??                    C  exec_ctrlc          DB  ?               ; state
				 of users ctrlc flag 
 0039  ????                  C  Exec_low_seg        DW  ? 
 003B  ????                  C  CurrentPDB          DW  ? 
 003D  ??                    C  NUMIO               DB  ? 
 = 003E                      C  ZEXECDATASIZ    =       $-ZERO 
 003E                        C  ZEXECDATAEND    LABEL   BYTE 
                             C          PUBLIC  ZEXECDATAEND 
 003E                        C  ZEXEC_DATA  ENDS 
 0000                        C  ZEXEC_CODE  SEGMENT PUBLIC PARA 
                             C          PUBLIC  $EXEC 
 = 0000                      C  ZERO =   $ 
                             C          procedure   $EXEC,FAR 
 0000                        C1 $EXEC PROC FAR
                             C          ASSUME  CS:EGROUP,SS:RESGROUP,ES:NOTHIN
				G,DS:NOTHING 
                             C  ENDIF 
                             C  ENDIF 
                             C  ; 
                             C  ; validate function 
                             C  ; 
                             C   
                             C  IF IBM 
 0000  0E                    C          PUSH    CS 
 0001  1F                    C          POP     DS 
                             C          ASSUME  DS:EGROUP 
                             C   
 0002  B8 3300               C          MOV     AX,(Set_Ctrl_C_Trapping SHL 8) 
				+ 0      ; Save current ctrl-c 
 0005  CD 21                 C          INT     int_command 
 0007  88 16 0038 R          C          MOV     exec_ctrlc,DL 
 000B  33 D2                 C          XOR     DX,DX 
 000D  B8 3301               C          MOV     AX,(Set_Ctrl_C_Trapping SHL 8) 
				+ 1      ; Turn it off! 
 0010  CD 21                 C          INT     int_command 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-82
$exec - load/go a program                                   

                             C   
 0012  B4 51                 C          MOV     AH,Get_current_PDB 
 0014  CD 21                 C          INT     int_command 
 0016  89 1E 003B R          C          MOV     [CurrentPDB],BX 
                             C  ; 
                             C  ; set up user return stack info 
                             C  ; 
 001A  8E C3                 C          MOV     ES,BX 
 001C  36: C4 1E 0000 E      C          LES     BX,DWORD PTR [user_sp] 
 0021  26: 8C 06 0030        C          MOV     WORD PTR ES:[PDB_user_stack+2],
				ES 
 0026  26: 89 1E 002E        C          MOV     WORD PTR ES:[PDB_user_stack],BX
				 
                             C   
 002B  B4 19                 C          MOV     AH,Get_Default_Drive 
 002D  CD 21                 C          INT     int_command 
 002F  8A D0                 C          MOV     DL,AL 
 0031  B4 0E                 C          MOV     AH,Set_default_drive 
 0033  CD 21                 C          INT     int_command 
 0035  A2 003D R             C          MOV     [NUMIO],AL 
                             C  ; 
                             C  ; determine lowest seg address for overwrite pr
				oblem (round DOWN) 
                             C  ; 
 0038  B1 04                 C          MOV     CL,4 
 003A  B8 00D2 R             C          MOV     AX,OFFSET ZEXEC_CODE:exec_check
				 
 003D  D3 E8                 C          SHR     AX,CL 
 003F  0E                    C          PUSH    CS 
 0040  5B                    C          POP     BX 
 0041  03 C3                 C          ADD     AX,BX 
 0043  A3 0039 R             C          MOV     [exec_low_seg],AX 
                             C   
 0046  E8 0538 R             C          CALL    get_user_stack 
                             C          ASSUME  DS:NOTHING 
 0049  8B 04                 C          MOV     AX,[SI.user_AX] 
 004B  8B 5C 02              C          MOV     BX,[SI.user_BX] 
 004E  8B 54 06              C          MOV     DX,[SI.user_DX] 
 0051  8E 44 10              C          MOV     ES,[SI.user_ES] 
 0054  8E 5C 0E              C          MOV     DS,[SI.user_DS] 
                             C  ENDIF 
                             C   
 0057  3C 03                 C          CMP     AL,3                    ; only 
				0, 1 or 3 are allowed 
 0059  76 07                 C          JNA     exec_check_2 
                             C   
 005B                        C  exec_bad_fun: 
                             C          error   error_invalid_function 
 005B  B0 01                 C1  MOV AL,error_invalid_function
 005D                        C3  ??0002:
 005D  E9 0518 R             C3  JMP SYS_RET_ERR
                             C   
 0060                        C  exec_ret_err: 
                             C          transfer    SYS_RET_ERR 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-83
$exec - load/go a program                                   

 0060                        C2  ??0003:
 0060  EB FB                 C2  JMP SYS_RET_ERR_J
                             C   
 0062                        C  exec_check_2: 
 0062  3C 02                 C          CMP     AL,2 
 0064  74 F5                 C          JZ      exec_bad_fun 
                             C   
 0066  2E: 89 1E 0000 R      C          MOV     WORD PTR [exec_blk],BX  ; stash
				 args 
 006B  2E: 8C 06 0002 R      C          MOV     WORD PTR [exec_blk+2],ES 
 0070  2E: A2 0004 R         C          MOV     BYTE PTR [exec_func],AL 
 0074  2E: C6 06 0019 R 00   C          MOV     BYTE PTR [exec_load_high],0 
                             C  IF IBM 
 007A  B8 3D00               C          MOV     AX,(OPEN SHL 8) + 0 
 007D  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 007F  72 DF                 C          JC      exec_ret_err 
 0081  2E: A3 0005 R         C          MOV     [exec_fh],AX 
 0085  8B D8                 C          MOV     BX,AX 
                             C  IF IBM 
 0087  B8 4400               C          MOV     AX,(ioctl SHL 8)        ; get d
				evice information 
 008A  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 008C  F6 C2 80              C          TEST    DL,devid_ISDEV 
 008F  74 04                 C          JZ      exec_check_environ 
 0091  B0 02                 C          MOV     AL,exec_file_not_found 
                             C          transfer    SYS_RET_ERR 
 0093                        C2  ??0004:
 0093  EB CB                 C2  JMP SYS_RET_ERR_J
                             C   
 0095                        C  exec_check_environ: 
 0095  2E: C7 06 0017 R 0000 C          MOV     [exec_load_block],0 
                             C   
 009C  2E: F6 06 0004 R 02   C          TEST    BYTE PTR [exec_func],exec_func_
				overlay   ; overlays... no environment 
 00A2  75 60                 C          JNZ     exec_read_header 
 00A4  2E: C5 36 0000 R      C          LDS     SI,DWORD PTR [exec_blk] ; get b
				lock 
 00A9  8B 04                 C          MOV     AX,[SI].Exec1_environ   ; addre
				ss of environ 
 00AB  0B C0                 C          OR      AX,AX 
 00AD  75 10                 C          JNZ     exec_scan_env 
 00AF  2E: 8E 1E 003B R      C          MOV     DS,[CurrentPDB] 
 00B4  A1 002C               C          MOV     AX,DS:[PDB_environ] 
 00B7  2E: A3 0013 R         C          MOV     [exec_environ],AX 
 00BB  0B C0                 C          OR      AX,AX 
 00BD  74 45                 C          JZ      exec_read_header 
                             C   
 00BF                        C  exec_scan_env: 
 00BF  FC                    C          CLD 
 00C0  8E C0                 C          MOV     ES,AX 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-84
$exec - load/go a program                                   

 00C2  33 FF                 C          XOR     DI,DI 
 00C4  B9 7FFF               C          MOV     CX,07FFFh               ; at mo
				st 32k of environment 
 00C7  32 C0                 C          XOR     AL,AL 
                             C   
 00C9                        C  exec_get_environ_len: 
 00C9  F2/ AE                C          REPNZ   SCASB                   ; find 
				that nul byte 
 00CB  74 05                 C          JZ      exec_check              ; CX is
				 out... bad environment 
 00CD  B0 0A                 C          MOV     AL,exec_bad_environment 
 00CF  E9 0170 R             C          JMP     exec_bomb 
                             C   
 00D2                        C  exec_check: 
 00D2  AE                    C          SCASB                           ; is th
				ere another nul byte? 
 00D3  75 F4                 C          JNZ     exec_get_environ_len    ; no, s
				can some more 
 00D5  57                    C          PUSH    DI 
 00D6  8B DF                 C          MOV     BX,DI                   ; AX <-
				 length of environment 
 00D8  83 C3 0F              C          ADD     BX,0Fh 
 00DB  B1 04                 C          MOV     CL,4 
 00DD  D3 EB                 C          SHR     BX,CL                   ; numbe
				r of paragraphs needed 
 00DF  06                    C          PUSH    ES 
                             C  IF IBM 
 00E0  B4 48                 C          MOV     AH,ALLOC 
 00E2  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 00E4  1F                    C          POP     DS 
 00E5  59                    C          POP     CX 
 00E6  73 03                 C          JNC     exec_save_environ 
 00E8  E9 016A R             C          JMP     exec_no_mem             ; nope.
				.. cry and sob 
                             C   
 00EB                        C  exec_save_environ: 
 00EB  8E C0                 C          MOV     ES,AX 
 00ED  2E: A3 0013 R         C          MOV     [exec_environ],AX       ; save 
				him for a rainy day 
                             C  IF IBM 
 00F1  51                    C          PUSH    CX 
 00F2  8C C1                 C          MOV     CX,ES 
 00F4  03 CB                 C          ADD     CX,BX 
 00F6  2E: 3B 1E 0039 R      C          CMP     BX,[exec_low_seg] 
 00FB  59                    C          POP     CX 
 00FC  77 6C                 C          JA      exec_no_mem 
                             C  ENDIF 
 00FE  33 F6                 C          XOR     SI,SI 
 0100  33 FF                 C          XOR     DI,DI 
 0102  F3/ A4                C          REP     MOVSB                   ; copy 
				the environment 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-85
$exec - load/go a program                                   

 0104                        C  exec_read_header: 
                             C  ; 
                             C  ; We read in the program header into the above 
				data area and determine 
                             C  ; where in this memory the image will be locate
				d. 
                             C  ; 
                             C  IF IBM 
 0104  0E                    C          PUSH    CS 
 0105  1F                    C          POP     DS                      ; and p
				ut it in DS:DX 
                             C          ASSUME  DS:EGROUP 
                             C  ENDIF 
                             C  ENDIF 
 0106  B9 001E               C          MOV     CX,exec_internal_buffer_size; h
				eader size 
 0109  8B 1E 0005 R          C          MOV     BX,[exec_fh]            ; from 
				the handle 
                             C  IF IBM 
 010D  BA 001A R             C          MOV     DX,OFFSET EGROUP:exec_signature
				 
                             C  ENDIF 
                             C  ENDIF 
 0110  06                    C          PUSH    ES 
 0111  1E                    C          PUSH    DS 
 0112  E8 04E1 R             C          CALL    exec_dealloc 
                             C  IF IBM 
 0115  B4 3F                 C          MOV     AH,READ 
 0117  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 0119  E8 04EA R             C          CALL    exec_alloc 
 011C  1F                    C          POP     DS 
 011D  07                    C          POP     ES 
 011E  72 4E                 C          JC      exec_bad_file 
 0120  3D 001E               C          CMP     AX,exec_internal_buffer_size; d
				id we read the right number? 
 0123  75 19                 C          JNZ     exec_com_filej          ; yep..
				. continue 
 0125  83 3E 0026 R 00       C          CMP     [exec_max_BSS],0 
 012A  75 05                 C          JNZ     exec_check_sig 
 012C  C6 06 0019 R FF       C          MOV     [exec_load_high],-1 
 0131                        C  exec_check_sig: 
 0131  A1 001A R             C          MOV     AX,[exec_signature] 
 0134  3D 5A4D               C          CMP     AX,exe_valid_signature  ; zibo 
				arises! 
 0137  74 08                 C          JZ      exec_save_start         ; assum
				e com file if no signature 
 0139  3D 4D5A               C          CMP     AX,exe_valid_old_signature  ; z
				ibo arises! 
 013C  74 03                 C          JZ      exec_save_start         ; assum
				e com file if no signature 
                             C   
 013E                        C  exec_com_filej: 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-86
$exec - load/go a program                                   

 013E  E9 0303 R             C          JMP     exec_com_file 
                             C   
                             C  ; 
                             C  ; We have the program header... determine memor
				y requirements 
                             C  ; 
 0141                        C  exec_save_start: 
 0141  A1 001E R             C          MOV     AX,[exec_pages]         ; get 5
				12-byte pages 
 0144  B1 05                 C          MOV     CL,5                    ; conve
				rt to paragraphs 
 0146  D3 E0                 C          SHL     AX,CL 
 0148  2B 06 0022 R          C          SUB     AX,[exec_par_dir]       ; AX = 
				size in paragraphs 
 014C  A3 0009 R             C          MOV     [exec_res_len_para],AX 
                             C   
                             C  ; 
                             C  ; Do we need to allocate memory?  Yes if functi
				on is not load-overlay 
                             C  ; 
 014F  F6 06 0004 R 02       C          TEST    BYTE PTR [exec_func],exec_func_
				overlay 
 0154  74 2B                 C          JZ      exec_allocate           ; alloc
				ation of space 
                             C  ; 
                             C  ; get load address from block 
                             C  ; 
 0156  C4 3E 0000 R          C          LES     DI,DWORD PTR [exec_blk] 
 015A  26: 8B 05             C          MOV     AX,ES:[DI].exec3_load_addr 
 015D  A3 0036 R             C          MOV     [exec_dma],AX 
 0160  26: 8B 45 02          C          MOV     AX,ES:[DI].exec3_reloc_fac 
 0164  A3 0007 R             C          MOV     [exec_rel_fac],AX 
                             C  IF IBM 
 0167  E9 0224 R             C          JMP     exec_find_res 
                             C  ENDIF 
                             C  ENDIF 
                             C   
 016A                        C  exec_no_mem: 
 016A  B0 08                 C          MOV     AL,exec_not_enough_memory 
 016C  EB 02                 C          JMP     SHORT exec_bomb             ; A
				X should be set by $ALLOC 
                             C   
 016E                        C  exec_bad_file: 
 016E  B0 0B                 C          MOV     AL,exec_bad_format 
                             C   
 0170                        C  exec_bomb: 
                             C          ASSUME  DS:NOTHING,ES:NOTHING 
 0170  50                    C          PUSH    AX 
 0171  2E: 8B 1E 0005 R      C          MOV     BX,[exec_fh] 
 0176  E8 04E1 R             C          CALL    exec_dealloc 
                             C  IF IBM 
 0179  B4 3E                 C          MOV     AH,CLOSE 
 017B  CD 21                 C          INT     int_command 
                             C  ENDIF 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-87
$exec - load/go a program                                   

                             C  ENDIF 
 017D  58                    C          POP     AX 
                             C          transfer    SYS_RET_ERR 
 017E                        C2  ??0005:
 017E  E9 0518 R             C2  JMP SYS_RET_ERR
                             C   
 0181                        C  exec_allocate: 
                             C  IF IBM 
                             C          ASSUME  DS:EGROUP 
                             C  ENDIF 
                             C  ENDIF 
 0181  50                    C          PUSH    AX 
 0182  BB FFFF               C          MOV     BX,0FFFFh               ; see h
				ow much room in arena 
 0185  1E                    C          PUSH    DS 
                             C  IF IBM 
 0186  B4 48                 C          MOV     AH,ALLOC 
 0188  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 018A  1F                    C          POP     DS 
 018B  58                    C          POP     AX 
 018C  05 0010               C          ADD     AX,10h                  ; room 
				for header 
 018F  83 FB 11              C          CMP     BX,11h                  ; enoug
				h room for a header 
 0192  72 D6                 C          JB      exec_no_mem 
 0194  3B C3                 C          CMP     AX,BX                   ; is th
				ere enough for bare image? 
 0196  77 D2                 C          JA      exec_no_mem 
 0198  80 3E 0019 R 00       C          CMP     [exec_load_high],0      ; if lo
				ad high, use max 
 019D  75 18                 C          JNZ     exec_BX_max             ; use m
				ax 
 019F  03 06 0024 R          C          ADD     AX,[exec_min_BSS]       ; go fo
				r min allocation 
 01A3  72 C5                 C          JC      exec_no_mem             ; oops!
				 carry 
 01A5  3B C3                 C          CMP     AX,BX                   ; enoug
				h space? 
 01A7  77 C1                 C          JA      exec_no_mem             ; nope.
				.. 
 01A9  2B 06 0024 R          C          SUB     AX,[exec_min_BSS] 
 01AD  03 06 0026 R          C          ADD     AX,[exec_max_BSS]       ; go fo
				r the MAX 
 01B1  72 04                 C          JC      exec_BX_max 
 01B3  3B C3                 C          CMP     AX,BX 
 01B5  76 02                 C          JBE     exec_got_block 
                             C   
 01B7                        C  exec_BX_max: 
 01B7  8B C3                 C          MOV     AX,BX 
                             C   
 01B9                        C  exec_got_block: 
 01B9  1E                    C          PUSH    DS 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-88
$exec - load/go a program                                   

 01BA  8B D8                 C          MOV     BX,AX 
 01BC  89 1E 0015 R          C          MOV     [exec_size],BX 
                             C  IF IBM 
 01C0  B4 48                 C          MOV     AH,ALLOC 
 01C2  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 01C4  1F                    C          POP     DS 
 01C5  72 A3                 C          JC      exec_no_mem 
 01C7  A3 0017 R             C          MOV     [exec_load_block],AX 
 01CA  05 0010               C          ADD     AX,10h 
 01CD  80 3E 0019 R 00       C          CMP     [exec_load_high],0 
 01D2  74 0B                 C          JZ      exec_use_ax             ; use a
				x for load info 
 01D4  03 06 0015 R          C          ADD     AX,[exec_size]          ; go to
				 end 
 01D8  2B 06 0009 R          C          SUB     AX,[exec_res_len_para]  ; drop 
				off header 
 01DC  2D 0010               C          SUB     AX,10h                  ; drop 
				off pdb 
 01DF                        C  exec_use_ax: 
 01DF  A3 0007 R             C          MOV     [exec_rel_fac],AX       ; new s
				egment 
 01E2  A3 0036 R             C          MOV     [exec_dma],AX           ; begin
				ning of dma 
                             C  IF IBM 
 01E5  3B 06 0039 R          C          CMP     AX,[exec_low_seg]       ; below
				 loader 
 01E9  77 2A                 C          JA      exec_no_mem_try 
 01EB  03 06 0009 R          C          ADD     AX,[exec_res_len_para]  ; go to
				 end 
 01EF  3B 06 0039 R          C          CMP     Ax,[exec_low_seg]       ; above
				 loader 
 01F3  76 2F                 C          JBE     exec_find_res 
 01F5                        C  exec_try_high: 
 01F5  80 3E 0019 R 00       C          CMP     [exec_load_high],0 
 01FA  74 25                 C          JZ      exec_no_memj1 
 01FC                        C  exec_try_just_below: 
 01FC  8B D0                 C          MOV     DX,AX 
 01FE  2B 16 0015 R          C          SUB     DX,[exec_size]          ; get b
				eginning 
 0202  03 16 0009 R          C          ADD     DX,[exec_res_len_para]  ; no sp
				ace 
 0206  3B 16 0039 R          C          CMP     DX,[exec_low_seg]       ; room 
				there? 
 020A  77 15                 C          JA      exec_no_memj1 
 020C  A1 0039 R             C          MOV     AX,[exec_low_seg] 
 020F  2B 06 0009 R          C          SUB     AX,[exec_res_len_para] 
 0213  EB CA                 C          JMP     exec_use_ax 
 0215                        C  exec_no_mem_try: 
 0215  8C CA                 C          MOV     DX,CS 
 0217  81 C2 0059            C          ADD     DX,(zexecdatasiz+zexeccodesize+
				15)/16 
 021B  3B C2                 C          CMP     AX,DX 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-89
$exec - load/go a program                                   

 021D  73 D6                 C          JAE     exec_try_high 
 021F  EB DB                 C          JMP     exec_try_just_below 
 0221                        C  exec_no_memj1: 
 0221  E9 016A R             C          JMP     exec_no_mem 
                             C  ENDIF 
                             C   
                             C  ; 
                             C  ; Determine the location in the file of the beg
				inning of the resident 
                             C  ; 
 0224                        C  exec_find_res: 
 0224  8B 16 0022 R          C          MOV     DX,[exec_par_dir] 
 0228  52                    C          PUSH    DX 
 0229  B1 04                 C          MOV     CL,4 
 022B  D3 E2                 C          SHL     DX,CL                   ; low w
				ord of location 
 022D  58                    C          POP     AX 
 022E  B1 0C                 C          MOV     CL,12 
 0230  D3 E8                 C          SHR     AX,CL                   ; high 
				word of location 
 0232  8B C8                 C          MOV     CX,AX                   ; CX <-
				 high 
                             C   
                             C  ; 
                             C  ; Read in the resident image (first, seek to it
				) 
                             C  ; 
 0234  8B 1E 0005 R          C          MOV     BX,[exec_fh] 
 0238  1E                    C          PUSH    DS 
                             C  IF IBM 
 0239  B8 4200               C          MOV     AX,(LSEEK SHL 8) + 0 
 023C  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 023E  1F                    C          POP     DS 
                             C   
 023F                        C  exec_big_read:                          ; Read 
				resident into memory 
 023F  8B 1E 0009 R          C          MOV     BX,[exec_res_len_para] 
 0243  81 FB 1000            C          CMP     BX,1000h                ; too m
				any bytes to read? 
 0247  72 03                 C          JB      exec_read_ok 
 0249  BB 0FE0               C          MOV     BX,0FE0h                ; max i
				n one chunk FE00 bytes 
                             C   
 024C                        C  exec_read_ok: 
 024C  29 1E 0009 R          C          SUB     [exec_res_len_para],BX  ; we re
				ad (soon) this many 
 0250  53                    C          PUSH    BX 
 0251  B1 04                 C          MOV     CL,4 
 0253  D3 E3                 C          SHL     BX,CL                   ; get c
				ount in bytes from paras 
 0255  8B CB                 C          MOV     CX,BX                   ; count
				 in correct register 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-90
$exec - load/go a program                                   

 0257  8B 1E 0005 R          C          MOV     BX,[exec_fh]            ; handl
				e in correct register 
 025B  1E                    C          PUSH    DS 
 025C  8E 1E 0036 R          C          MOV     DS,[exec_dma]           ; Set u
				p read buffer 
                             C          ASSUME  DS:NOTHING 
 0260  33 D2                 C          XOR     DX,DX 
 0262  51                    C          PUSH    CX                      ; save 
				our count 
 0263  E8 04E1 R             C          CALL    exec_dealloc 
                             C  IF IBM 
 0266  B4 3F                 C          MOV     AH,READ 
 0268  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 026A  E8 04EA R             C          CALL    exec_alloc 
 026D  59                    C          POP     CX                      ; get o
				ld count to verify 
 026E  1F                    C          POP     DS 
                             C  IF IBM 
                             C          ASSUME  DS:EGROUP 
                             C  ENDIF 
                             C  ENDIF 
 026F  3B C8                 C          CMP     CX,AX                   ; did w
				e read enough? 
 0271  5B                    C          POP     BX                      ; get p
				aragraph count back 
 0272  75 0B                 C          JNZ     exec_do_reloc           ; and d
				o reloc if no more to read 
                             C  ; 
                             C  ; We've read in CX bytes... bump DTA location 
                             C  ; 
                             C   
 0274  01 1E 0036 R          C          ADD     [exec_dma],BX           ; bump 
				dma address 
 0278  83 3E 0009 R 00       C          CMP     [exec_res_len_para],0 
 027D  75 C0                 C          JNZ     exec_big_read 
                             C   
                             C  ; 
                             C  ; The image has now been read in.  We must perf
				orm relocation to 
                             C  ; the current location. 
                             C  ; 
                             C   
 027F                        C  exec_do_reloc: 
 027F  8B 0E 0007 R          C          MOV     CX,[exec_rel_fac] 
 0283  A1 0028 R             C          MOV     AX,[exec_SS]            ; get i
				nitial SS 
 0286  03 C1                 C          ADD     AX,CX                   ; and r
				elocate him 
 0288  A3 0011 R             C          MOV     [exec_init_SS],AX 
                             C   
 028B  A1 002A R             C          MOV     AX,[exec_SP]            ; initi
				al SP 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-91
$exec - load/go a program                                   

 028E  A3 000F R             C          MOV     [exec_init_SP],AX 
                             C   
 0291  C4 06 002E R          C          LES     AX,DWORD PTR [exec_IP] 
 0295  A3 000B R             C          MOV     [exec_init_IP],AX 
 0298  8C C0                 C          MOV     AX,ES 
 029A  03 C1                 C          ADD     AX,CX                   ; reloc
				ated... 
 029C  A3 000D R             C          MOV     [exec_init_CS],AX 
                             C   
 029F  33 C9                 C          XOR     CX,CX 
 02A1  8B 16 0032 R          C          MOV     DX,[exec_rle_table] 
 02A5  8B 1E 0005 R          C          MOV     BX,[exec_fh] 
 02A9  1E                    C          PUSH    DS 
                             C  IF IBM 
 02AA  B8 4200               C          MOV     AX,(LSEEK SHL 8) + 0 
 02AD  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 02AF  1F                    C          POP     DS 
                             C   
 02B0  73 03                 C          JNC     exec_get_entries 
 02B2                        C  exec_bad_filej: 
 02B2  E9 016E R             C          JMP     exec_bad_file 
                             C   
 02B5                        C  exec_get_entries: 
 02B5  8B 16 0020 R          C          MOV     DX,[exec_rle_count]     ; Numbe
				r of entries left 
                             C   
 02B9                        C  exec_read_reloc: 
                             C          ASSUME  DS:NOTHING 
 02B9  52                    C          PUSH    DX 
                             C  IF IBM 
 02BA  BA 001A R             C          MOV     DX,OFFSET EGROUP:exec_signature
				 
                             C  ENDIF 
                             C  ENDIF 
 02BD  B9 001C               C          MOV     CX,((exec_internal_buffer_size)
				/4)*4 
 02C0  2E: 8B 1E 0005 R      C          MOV     BX,[exec_fh] 
 02C5  1E                    C          PUSH    DS 
 02C6  E8 04E1 R             C          CALL    exec_dealloc 
                             C  IF IBM 
 02C9  B4 3F                 C          MOV     AH,READ 
 02CB  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 02CD  E8 04EA R             C          CALL    exec_alloc 
 02D0  07                    C          POP     ES 
 02D1  5A                    C          POP     DX 
 02D2  72 DE                 C          JC      exec_bad_filej 
 02D4  B9 0007               C          MOV     CX,(exec_internal_buffer_size)/
				4 
                             C  IF IBM 
 02D7  BF 001A R             C          MOV     DI,OFFSET EGROUP:exec_signature
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-92
$exec - load/go a program                                   

				   ; Pointer to byte location in header 
                             C  ENDIF 
                             C  ENDIF 
                             C  ; 
                             C  ; Relocate a single address 
                             C  ; 
 02DA  2E: 8B 36 0007 R      C          MOV     SI,[exec_rel_fac] 
                             C   
 02DF                        C  exec_reloc_one: 
 02DF  83 FA 00              C          CMP     DX,0                    ; Any m
				ore entries? 
 02E2  75 03                 C          JNE     exec_get_addr 
 02E4  E9 03B4 R             C          JMP     Exec_set_PDB 
                             C   
 02E7                        C  exec_get_addr: 
 02E7  26: C5 1D             C          LDS     BX,DWORD PTR ES:[DI]    ; Get r
				a/sa of entry 
 02EA  8C D8                 C          MOV     AX,DS                   ; Reloc
				ate address of item 
 02EC  03 C6                 C          ADD     AX,SI 
 02EE  8E D8                 C          MOV     DS,AX 
 02F0  8B 07                 C          MOV     AX,WORD PTR DS:[BX]     ; Reloc
				ate item 
 02F2  03 C6                 C          ADD     AX,SI 
 02F4  89 07                 C          MOV     WORD PTR DS:[BX],AX 
 02F6  83 C7 04              C          ADD     DI,4 
 02F9  4A                    C          DEC     DX 
 02FA  E2 E3                 C          LOOP    exec_reloc_one              ; E
				nd of internal buffer? 
                             C   
                             C  ; 
                             C  ; We've exhausted a single buffer's worth.  Rea
				d in the next piece 
                             C  ; of the relocation table. 
                             C  ; 
                             C   
 02FC  06                    C          PUSH    ES 
 02FD  1F                    C          POP     DS 
 02FE  EB B9                 C          JMP     exec_read_reloc 
                             C   
 0300                        C  exec_no_memj: 
 0300  E9 016A R             C          JMP     exec_no_mem 
                             C   
                             C  ; 
                             C  ; we have a .COM file.  First, determine if we 
				are merely loading an overlay. 
                             C  ; 
 0303                        C  exec_com_file: 
 0303  2E: F6 06 0004 R 02   C          TEST    BYTE PTR [exec_func],exec_func_
				overlay 
 0309  74 0C                 C          JZ      exec_alloc_com_file 
 030B  2E: C5 36 0000 R      C          LDS     SI,DWORD PTR [exec_blk]        
				   ; get arg block 
 0310  AD                    C          LODSW                           ; get l
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-93
$exec - load/go a program                                   

				oad address 
 0311  2E: A3 0036 R         C          MOV     [exec_dma],AX 
 0315  EB 41                 C          JMP     SHORT exec_64k          ; read 
				it all! 
                             C   
                             C  ; We must allocate the max possible size block 
				(ick!)  and set up 
                             C  ; CS=DS=ES=SS=PDB pointer, IP=100, SP=max size 
				of block. 
                             C  ; 
 0317                        C  exec_alloc_com_file: 
 0317  BB FFFF               C          MOV     BX,0FFFFh 
                             C  IF IBM 
 031A  B4 48                 C          MOV     AH,ALLOC 
 031C  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 031E  0B DB                 C          OR      BX,BX 
 0320  74 DE                 C          JZ      exec_no_memj 
 0322  2E: 89 1E 0015 R      C          MOV     [exec_size],BX          ; save 
				size of allocation block 
                             C  IF IBM 
 0327  B4 48                 C          MOV     AH,ALLOC 
 0329  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 032B  2E: A3 0017 R         C          MOV     [exec_load_block],AX 
 032F  05 0010               C          ADD     AX,10h                  ; incre
				ment for header 
 0332  2E: A3 0036 R         C          MOV     [exec_dma],AX 
 0336  83 EB 10              C          SUB     BX,10h                  ; remem
				ber header 
                             C  IF IBM 
                             C  ; 
                             C  ; need to read up to exec_low_seg (at most) 
                             C  ; 
 0339  2E: 8B 0E 0039 R      C          MOV     CX,[exec_low_seg] 
 033E  3B C1                 C          CMP     AX,CX                   ; is ba
				se of allocation above spot 
 0340  77 08                 C          JA      exec_check_64k 
 0342  2B C8                 C          SUB     CX,AX 
 0344  3B CB                 C          CMP     CX,BX 
 0346  77 02                 C          JA      exec_check_64k 
 0348  8B D9                 C          MOV     BX,CX 
                             C   
 034A                        C  exec_check_64k: 
                             C  ENDIF 
 034A  81 FB 1000            C          CMP     BX,1000h                ; 64k o
				r more? 
 034E  73 08                 C          JAE     exec_64k                ; yes, 
				read only 64k 
 0350  8B C3                 C          MOV     AX,BX                   ; conve
				rt size to bytes 
 0352  B1 04                 C          MOV     CL,4 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-94
$exec - load/go a program                                   

 0354  D3 E0                 C          SHL     AX,CL 
 0356  EB 03                 C          JMP     SHORT exec_read_com 
                             C   
 0358                        C  exec_64k: 
 0358  B8 FFFF               C          MOV     AX,0FFFFh               ; 64k-1
				 bytes 
                             C   
 035B                        C  exec_read_com: 
 035B  50                    C          PUSH    AX                      ; save 
				number to read 
 035C  2E: 8B 1E 0005 R      C          MOV     BX,[exec_fh]            ; of co
				m file 
 0361  33 C9                 C          XOR     CX,CX                   ; but s
				eek to 0:0 
 0363  8B D1                 C          MOV     DX,CX 
                             C  IF IBM 
 0365  B8 4200               C          MOV     AX,(LSEEK SHL 8) + 0 
 0368  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 036A  2E: 8B 1E 0005 R      C          MOV     BX,[exec_fh] 
 036F  59                    C          POP     CX                      ; numbe
				r to read 
 0370  2E: 8E 1E 0036 R      C          MOV     DS,[exec_dma] 
 0375  33 D2                 C          XOR     DX,DX 
 0377  51                    C          PUSH    CX 
 0378  E8 04E1 R             C          CALL    exec_dealloc 
                             C  IF IBM 
 037B  B4 3F                 C          MOV     AH,READ 
 037D  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 037F  E8 04EA R             C          CALL    exec_alloc 
 0382  5E                    C          POP     SI                      ; get n
				umber of bytes to read 
 0383  3B C6                 C          CMP     AX,SI                   ; did w
				e read them all? 
                             C  IF IBM 
 0385  75 03                 C          JNZ     exec_skip               ; exact
				ly the wrong number... no memory 
 0387  E9 016A R             C          JMP     exec_no_mem 
 038A                        C  exec_skip: 
                             C  ENDIF 
                             C  ENDIF 
 038A  2E: F6 06 0004 R 02   C          TEST    BYTE PTR [exec_func],exec_func_
				overlay 
 0390  75 22                 C          JNZ     exec_set_PDB            ; no st
				arto, chumo! 
 0392  2E: A1 0036 R         C          MOV     AX,[exec_DMA] 
 0396  2D 0010               C          SUB     AX,10h 
 0399  2E: A3 000D R         C          MOV     [exec_init_CS],AX 
 039D  2E: C7 06 000B R 0100 C          MOV     [exec_init_IP],100h     ; initi
				al IP is 100 
                             C          ; SI is at most FFFFh 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-95
$exec - load/go a program                                   

 03A4  4E                    C          DEC     SI                      ; make 
				room for stack 
                             C          ; SI is at most FFFEh, room for a 0! 
 03A5  2E: 89 36 000F R      C          MOV     [exec_init_SP],SI       ; max v
				alue for read is also SP! 
 03AA  2E: A3 0011 R         C          MOV     [exec_init_SS],AX 
 03AE  8E D8                 C          MOV     DS,AX 
 03B0  C7 04 0000            C          MOV     WORD PTR DS:[SI],0      ; 0 for
				 return 
                             C   
 03B4                        C  exec_set_PDB: 
 03B4  2E: 8B 1E 0005 R      C          MOV     BX,[exec_fh]            ; we ar
				e finished with the file. 
 03B9  E8 04E1 R             C          CALL    exec_dealloc 
                             C  IF IBM 
 03BC  B4 3E                 C          MOV     AH,CLOSE 
 03BE  CD 21                 C          INT     int_command 
                             C  ENDIF 
                             C  ENDIF 
 03C0  E8 04EA R             C          CALL    exec_alloc 
 03C3  2E: F6 06 0004 R 02   C          TEST    BYTE PTR [exec_func],exec_func_
				overlay 
 03C9  74 03                 C          JZ      exec_build_header 
                             C          transfer    SYS_RET_OK          ; overl
				ay load -> done 
 03CB                        C2  ??0006:
 03CB  E9 0527 R             C2  JMP SYS_RET_OK
                             C   
 03CE                        C  exec_build_header: 
 03CE  2E: 8B 16 0017 R      C          MOV     DX,[exec_load_block] 
                             C  ; 
                             C  ; assign the space to the process 
                             C  ; 
                             C   
 03D3  BE 0001               C          MOV     SI,arena_owner          ; point
				er to owner field 
                             C   
 03D6  2E: A1 0013 R         C          MOV     AX,[exec_environ]       ; get e
				nviron pointer 
 03DA  0B C0                 C          OR      AX,AX 
 03DC  74 05                 C          JZ      NO_OWNER                ; no en
				vironment 
 03DE  48                    C          DEC     AX                      ; point
				 to header 
 03DF  8E D8                 C          MOV     DS,AX 
 03E1  89 14                 C          MOV     DS:[SI],DX              ; assig
				n ownership 
 03E3                        C  NO_OWNER: 
 03E3  2E: A1 0017 R         C          MOV     AX,[exec_load_block]    ; get l
				oad block pointer 
 03E7  48                    C          DEC     AX 
 03E8  8E D8                 C          MOV     DS,AX                   ; point
				 to header 
 03EA  89 14                 C          MOV     DS:[SI],DX              ; assig
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-96
$exec - load/go a program                                   

				n ownership 
                             C   
 03EC  52                    C          PUSH    DX 
                             C  IF IBM 
 03ED  B4 55                 C          MOV     AH,DUP_PDB 
 03EF  CD 21                 C          INT     int_command 
 03F1  8E C2                 C          MOV     ES,DX 
 03F3  2E: 89 16 003B R      C          MOV     [CurrentPDB],DX 
                             C  ENDIF 
                             C  ENDIF 
 03F8  5A                    C          POP     DX 
 03F9  2E: FF 36 0013 R      C          PUSH    [exec_environ] 
 03FE  26: 8F 06 002C        C          POP     ES:[PDB_environ] 
 0403  2E: 8B 36 0015 R      C          MOV     SI,[exec_size] 
 0408  03 F2                 C          ADD     SI,DX 
 040A  26: 89 36 0002        C          MOV     ES:[PDB_block_len],SI 
                             C  ; 
                             C  ; set up proper command line stuff 
                             C  ; 
 040F  2E: C5 36 0000 R      C          LDS     SI,DWORD PTR [exec_blk]        
				   ; get the block 
 0414  1E                    C          PUSH    DS                      ; save 
				its location 
 0415  56                    C          PUSH    SI 
 0416  C5 74 06              C          LDS     SI,DS:[SI.exec0_5C_FCB] ; get t
				he 5c fcb 
 0419  B9 000C               C          MOV     CX,12                   ; copy 
				drive, name and ext 
 041C  51                    C          PUSH    CX 
 041D  BF 005C               C          MOV     DI,5Ch 
 0420  8A 1C                 C          MOV     BL,DS:[SI] 
 0422  F3/ A4                C          REP     MOVSB 
 0424  33 C0                 C          XOR     AX,AX                   ; zero 
				extent, etc for CPM 
 0426  AB                    C          STOSW 
 0427  AB                    C          STOSW 
 0428  59                    C          POP     CX 
 0429  5E                    C          POP     SI                      ; get b
				lock 
 042A  1F                    C          POP     DS 
 042B  1E                    C          PUSH    DS                      ; save 
				(again) 
 042C  56                    C          PUSH    SI 
 042D  C5 74 0A              C          LDS     SI,DS:[SI.exec0_6C_FCB] ; get 6
				C FCB 
 0430  BF 006C               C          MOV     DI,6Ch                  ; do sa
				me as above 
 0433  8A 3C                 C          MOV     BH,DS:[SI] 
 0435  F3/ A4                C          REP     MOVSB 
 0437  AB                    C          STOSW 
 0438  AB                    C          STOSW 
 0439  5E                    C          POP     SI                      ; get b
				lock (last time) 
 043A  1F                    C          POP     DS 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-97
$exec - load/go a program                                   

 043B  C5 74 02              C          LDS     SI,DS:[SI.exec0_com_line]   ; c
				ommand line 
 043E  B9 0080               C          MOV     CX,80h 
 0441  8B F9                 C          MOV     DI,CX 
 0443  F3/ A4                C          REP     MOVSB                   ; Wham!
				 
                             C   
                             C  ; 
                             C  ; Process BX into default AX (validity of drive
				 specs on args) 
                             C  ; 
 0445  FE C9                 C          DEC     CL                      ; get 0
				FFh in CX 
 0447  2E: 3A 3E 003D R      C          CMP     BH,[NUMIO] 
 044C  76 04                 C          JBE     exec_BH_good 
 044E  8A F9                 C          MOV     BH,CL 
 0450  EB 02                 C          JMP     SHORT exec_BL 
 0452                        C  exec_BH_good: 
 0452  32 FF                 C          XOR     BH,BH 
 0454                        C  exec_BL: 
 0454  2E: 3A 1E 003D R      C          CMP     BL,[NUMIO] 
 0459  76 04                 C          JBE     exec_BL_good 
 045B  8A D9                 C          MOV     BL,CL 
 045D  EB 02                 C          JMP     SHORT exec_set_return 
 045F                        C  exec_BL_good: 
 045F  32 DB                 C          XOR     BL,BL 
 0461                        C  exec_set_return: 
                             C          invoke  get_user_stack          ; get h
				is return address 
 0461  E8 0538 R             C1  CALL get_user_stack
 0464  FF 74 14              C          PUSH    [SI.user_CS]            ; suck 
				out the CS and IP 
 0467  FF 74 12              C          PUSH    [SI.user_IP] 
 046A  FF 74 14              C          PUSH    [SI.user_CS]            ; suck 
				out the CS and IP 
 046D  FF 74 12              C          PUSH    [SI.user_IP] 
 0470  26: 8F 06 000A        C          POP     WORD PTR ES:[PDB_Exit] 
 0475  26: 8F 06 000C        C          POP     WORD PTR ES:[PDB_Exit+2] 
 047A  33 C0                 C          XOR     AX,AX 
 047C  8E D8                 C          MOV     DS,AX 
 047E  8F 06 0088            C          POP     DS:[addr_int_terminate] ; save 
				them where we can get them later 
 0482  8F 06 008A            C          POP     DS:[addr_int_terminate+2]   ; w
				hen the child exits. 
                             C  ENDIF 
                             C  IF IBM 
 0486  52                    C          PUSH    DX 
 0487  1E                    C          PUSH    DS 
 0488  2E: 8E 1E 003B R      C          MOV     DS,[CurrentPDB] 
 048D  BA 0080               C          MOV     DX,80h 
 0490  B4 1A                 C          MOV     AH,SET_DMA 
 0492  CD 21                 C          INT     int_command 
 0494  1F                    C          POP     DS 
 0495  5A                    C          POP     DX 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-98
$exec - load/go a program                                   

                             C  ENDIF 
 0496  2E: F6 06 0004 R 01   C          TEST    BYTE PTR [exec_func],exec_func_
				no_execute 
 049C  74 26                 C          JZ      exec_go 
                             C   
 049E  2E: C5 36 000F R      C          LDS     SI,DWORD PTR [exec_init_SP] ; g
				et stack 
 04A3  2E: C4 3E 0000 R      C          LES     DI,DWORD PTR [exec_blk]        
				   ; and block for return 
 04A8  26: 8C 5D 10          C          MOV     ES:[DI].exec1_SS,DS     ; retur
				n SS 
                             C   
 04AC  4E                    C          DEC     SI                      ; 'push
				' default AX 
 04AD  4E                    C          DEC     SI 
 04AE  89 1C                 C          MOV     DS:[SI],BX              ; save 
				default AX reg 
 04B0  26: 89 75 0E          C          MOV     ES:[DI].exec1_SP,SI     ; retur
				n 'SP' 
                             C   
 04B4  2E: C5 06 000B R      C          LDS     AX,DWORD PTR [exec_init_IP] 
 04B9  26: 8C 5D 14          C          MOV     ES:[DI].exec1_CS,DS     ; initi
				al entry stuff 
                             C   
 04BD  26: 89 45 12          C          MOV     ES:[DI].exec1_IP,AX 
                             C          transfer    SYS_RET_OK 
 04C1                        C2  ??0007:
 04C1  EB 64 90              C2  JMP SYS_RET_OK
                             C   
 04C4                        C  exec_go: 
                             C  IF IBM 
 04C4  E8 053F R             C          CALL    restore_ctrlc               ; r
				estore value of ctrl-c checker 
                             C  ENDIF 
 04C7  2E: C5 36 000B R      C          LDS     SI,DWORD PTR [exec_init_IP] ; g
				et entry point 
 04CC  FA                    C          CLI 
                             C  ENDIF 
 04CD  2E: 8E 16 0011 R      C          MOV     SS,[exec_init_SS]       ; set u
				p user's stack 
                             C          ASSUME  SS:NOTHING 
 04D2  2E: 8B 26 000F R      C          MOV     SP,[exec_init_SP]       ; and S
				P 
 04D7  FB                    C          STI 
 04D8  1E                    C          PUSH    DS                      ; fake 
				long call to entry 
 04D9  56                    C          PUSH    SI 
 04DA  8E C2                 C          MOV     ES,DX                   ; set u
				p proper seg registers 
 04DC  8E DA                 C          MOV     DS,DX 
 04DE  8B C3                 C          MOV     AX,BX                   ; set u
				p proper AX 
                             C          procedure   exec_long_ret,FAR 
 04E0                        C1 exec_long_ret PROC FAR
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-99
$exec - load/go a program                                   

 04E0  CB                    C          RET 
                             C  exec_long_ret   ENDP 
                             C   
                             C  $Exec   ENDP 
                             C   
                             C          procedure   exec_dealloc,near 
 04E1                        C1 exec_dealloc PROC near
                             C          ASSUME      DS:NOTHING,ES:NOTHING 
 04E1  53                    C          PUSH        BX 
 04E2  BB 0000               C          MOV         BX,arena_owner_system 
 04E5  E8 04F5 R             C          CALL        exec_do_change_owner 
 04E8  5B                    C          POP         BX 
                             C          return 
 04E9                        C1 ??0008:
 04E9  C3                    C1  RET
                             C  exec_dealloc  ENDP 
                             C   
                             C          procedure   exec_alloc,near 
 04EA                        C1 exec_alloc PROC near
 04EA  53                    C          PUSH        BX 
 04EB  2E: 8B 1E 003B R      C          MOV         BX,[CurrentPDB] 
 04F0  E8 04F5 R             C          CALL        exec_do_change_owner 
 04F3  5B                    C          POP         BX 
                             C          return 
 04F4                        C1 ??0009:
 04F4  C3                    C1  RET
                             C  exec_alloc  ENDP 
                             C   
                             C          procedure   exec_do_change_owner,NEAR 
 04F5                        C1 exec_do_change_owner PROC NEAR
 04F5  1E                    C          PUSH    DS 
 04F6  50                    C          PUSH    AX 
 04F7  2E: A1 0013 R         C          MOV     AX,[exec_environ] 
 04FB  0B C0                 C          OR      AX,AX 
 04FD  74 07                 C          JZ      exec_alloc_try_load 
 04FF  48                    C          DEC     AX 
 0500  8E D8                 C          MOV     DS,AX 
 0502  89 1E 0001            C          MOV     DS:[arena_owner],BX 
 0506                        C  exec_alloc_try_load: 
 0506  2E: A1 0017 R         C          MOV     AX,[exec_load_block] 
 050A  0B C0                 C          OR      AX,AX 
 050C  74 07                 C          JZ      exec_alloc_done 
 050E  48                    C          DEC     AX 
 050F  8E D8                 C          MOV     DS,AX 
 0511  89 1E 0001            C          MOV     DS:[arena_owner],BX 
 0515                        C  exec_alloc_done: 
 0515  58                    C          POP     AX 
 0516  1F                    C          POP     DS 
 0517  C3                    C          RET 
                             C  exec_do_change_owner    ENDP 
                             C   
                             C  IF IBM 
 0518                        C  SYS_RET_ERR: 
 0518  E8 0538 R             C          CALL    get_user_stack 
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Page     1-100
$exec - load/go a program                                   

 051B  FF 74 16              C          PUSH    [SI.user_f] 
 051E  32 E4                 C          XOR     AH,AH 
 0520  89 04                 C          MOV     [SI.user_AX],AX 
 0522  9D                    C          POPF 
 0523  F9                    C          STC 
 0524  EB 09 90              C          JMP SYS_RET 
 0527                        C  SYS_RET_OK: 
 0527  E8 0538 R             C          CALL    get_user_stack 
 052A  FF 74 16              C          PUSH    [SI.user_f] 
 052D  9D                    C          POPF 
 052E  F8                    C          CLC 
 052F                        C  SYS_RET: 
 052F  9C                    C          PUSHF 
 0530  E8 053F R             C          CALL    restore_ctrlc 
 0533  8F 44 16              C          POP     [SI.user_f] 
 0536  EB A8                 C          JMP     exec_long_ret 
                             C   
                             C  ; 
                             C  ; get_user_stack returns the user's stack (and 
				hence registers) in DS:SI 
                             C  ; 
                             C          procedure   get_user_stack,NEAR 
 0538                        C1 get_user_stack PROC NEAR
 0538  16                    C          PUSH    SS 
 0539  1F                    C          POP     DS 
                             C          ASSUME  DS:RESGROUP 
 053A  C5 36 0000 E          C          LDS     SI,DWORD PTR [user_SP] 
 053E  C3                    C          RET 
                             C  get_user_stack  ENDP 
                             C  ; 
                             C  ; restore value of the ctrl-c checker 
                             C  ; 
                             C          procedure    restore_ctrlc 
 053F                        C1 restore_ctrlc PROC 
 053F  50                    C          PUSH    AX 
 0540  52                    C          PUSH    DX 
 0541  2E: 8A 16 0038 R      C          MOV     DL,CS:[exec_ctrlc] 
 0546  B8 3301               C          MOV     AX,(Set_Ctrl_C_Trapping SHL 8) 
				+ 1      ; Put it back 
 0549  CD 21                 C          INT     int_command 
 054B  5A                    C          POP     DX 
 054C  58                    C          POP     AX 
 054D  C3                    C          RET 
                             C  restore_ctrlc   ENDP 
                             C   
 = 054E                      C  ZEXECCODESIZE   EQU     $-ZERO 
 054E                        C  ZEXECCODEEND    LABEL BYTE 
                             C          PUBLIC  ZEXECCODEEND 
 054E                        C  ZEXEC_CODE      ENDS 
                             C  ENDIF 
                                 
                                ENDIF 
                                 
                                        END     PROGSTART 

Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016
VARSTRUC . . . . . . . . . . . .  	0059	0005
  ISDIR  . . . . . . . . . . . .  	0000
  SIZ  . . . . . . . . . . . . .  	0001
  TTAIL  . . . . . . . . . . . .  	0002
  INFO . . . . . . . . . . . . .  	0004
  BUF  . . . . . . . . . . . . .  	0005
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-5
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

EGROUP . . . . . . . . . . . . .  	GROUP
  ZEXEC_CODE . . . . . . . . . .  	054E	PARA	PUBLIC	
  ZEXEC_DATA . . . . . . . . . .  	003E	BYTE	PUBLIC	
RESGROUP . . . . . . . . . . . .  	GROUP
  CODERES  . . . . . . . . . . .  	05B7	PARA	PUBLIC	
  DATARES  . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  ENVIRONMENT  . . . . . . . . .  	00B0	PARA	PUBLIC	
  INIT . . . . . . . . . . . . .  	0000	PARA	PUBLIC	
  TAIL . . . . . . . . . . . . .  	0000	PARA	PUBLIC	
TRANGROUP  . . . . . . . . . . .  	GROUP
  TRANCODE . . . . . . . . . . .  	0000	PARA	PUBLIC	
  TRANDATA . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  TRANSPACE  . . . . . . . . . .  	0000	BYTE	PUBLIC	
  TRANTAIL . . . . . . . . . . .  	0000	PARA	PUBLIC	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALSO_BOGUS . . . . . . . . . . .  	L NEAR	0426	CODERES
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASKEND . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ASWITCH  . . . . . . . . . . . .  	Number	0004	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-6
                                                             

ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADMEMERR  . . . . . . . . . . .  	L NEAR	02D5	CODERES
BADMEMERRJ . . . . . . . . . . .  	L NEAR	039C	CODERES
BATCH  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
BMEMMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
BOGUS_COM  . . . . . . . . . . .  	L NEAR	040C	CODERES
BSWITCH  . . . . . . . . . . . .  	Number	0008	
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHECK_SUM  . . . . . . . . . . .  	L NEAR	0592	CODERES
CHK  . . . . . . . . . . . . . .  	L NEAR	0597	CODERES
CHK1 . . . . . . . . . . . . . .  	L NEAR	04A4	CODERES
CHKOTHERHAND . . . . . . . . . .  	L NEAR	04B1	CODERES
CHKSAME  . . . . . . . . . . . .  	L NEAR	0414	CODERES
CHKSUM . . . . . . . . . . . . .  	L NEAR	0587	CODERES	Global
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSELOOP  . . . . . . . . . . .  	L NEAR	04B7	CODERES
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COMBAD . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
COMBUFLEN  . . . . . . . . . . .  	Number	0080	
COMDRV . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
COMSPEC  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
CONPROC  . . . . . . . . . . . .  	L NEAR	0000	INIT	External
CONTC  . . . . . . . . . . . . .  	L NEAR	029C	CODERES	Global
CONTCTERM  . . . . . . . . . . .  	L NEAR	02B0	CODERES	Global
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENTPDB . . . . . . . . . . .  	L WORD 	003B	ZEXEC_DATA
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-7
                                                             

DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEFMSG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DODAB  . . . . . . . . . . . . .  	L NEAR	02D3	CODERES
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	0000	
DO_EXEC  . . . . . . . . . . . .  	L NEAR	018A	CODERES
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-8
                                                             

DRVCHAR  . . . . . . . . . . . .  	Number	003A	
DRVMSG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
DSKERR . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ECOMSPEC . . . . . . . . . . . .  	L BYTE 	001E	ENVIRONMENT	Global
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENVARENA . . . . . . . . . . . .  	L BYTE 	0000	ENVIRONMENT	Length = 0010
ENVIREND . . . . . . . . . . . .  	L BYTE 	00B0	ENVIRONMENT	Global
ENVIRONSIZ . . . . . . . . . . .  	Number	00A0	
ENVIRONSIZ2  . . . . . . . . . .  	Number	0092	
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEBAD . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXECEMES . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXECHK . . . . . . . . . . . . .  	L NEAR	0251	CODERES	Global
EXECMER  . . . . . . . . . . . .  	L NEAR	022B	CODERES
EXECRET  . . . . . . . . . . . .  	L NEAR	023D	CODERES
EXECSTART  . . . . . . . . . . .  	L WORD 	0000	TRANTAIL
EXEC_64K . . . . . . . . . . . .  	L NEAR	0358	ZEXEC_CODE
EXEC_ALLOC . . . . . . . . . . .  	N PROC	04EA	ZEXEC_CODE	Global	Length = 000B
EXEC_ALLOCATE  . . . . . . . . .  	L NEAR	0181	ZEXEC_CODE
EXEC_ALLOC_COM_FILE  . . . . . .  	L NEAR	0317	ZEXEC_CODE
EXEC_ALLOC_DONE  . . . . . . . .  	L NEAR	0515	ZEXEC_CODE
EXEC_ALLOC_TRY_LOAD  . . . . . .  	L NEAR	0506	ZEXEC_CODE
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FILE  . . . . . . . . .  	L NEAR	016E	ZEXEC_CODE
EXEC_BAD_FILEJ . . . . . . . . .  	L NEAR	02B2	ZEXEC_CODE
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_BAD_FUN . . . . . . . . . .  	L NEAR	005B	ZEXEC_CODE
EXEC_BH_GOOD . . . . . . . . . .  	L NEAR	0452	ZEXEC_CODE
EXEC_BIG_READ  . . . . . . . . .  	L NEAR	023F	ZEXEC_CODE
EXEC_BL  . . . . . . . . . . . .  	L NEAR	0454	ZEXEC_CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-9
                                                             

EXEC_BLK . . . . . . . . . . . .  	L DWORD	0000	ZEXEC_DATA
EXEC_BL_GOOD . . . . . . . . . .  	L NEAR	045F	ZEXEC_CODE
EXEC_BOMB  . . . . . . . . . . .  	L NEAR	0170	ZEXEC_CODE
EXEC_BUILD_HEADER  . . . . . . .  	L NEAR	03CE	ZEXEC_CODE
EXEC_BX_MAX  . . . . . . . . . .  	L NEAR	01B7	ZEXEC_CODE
EXEC_CHECK . . . . . . . . . . .  	L NEAR	00D2	ZEXEC_CODE
EXEC_CHECK_2 . . . . . . . . . .  	L NEAR	0062	ZEXEC_CODE
EXEC_CHECK_64K . . . . . . . . .  	L NEAR	034A	ZEXEC_CODE
EXEC_CHECK_ENVIRON . . . . . . .  	L NEAR	0095	ZEXEC_CODE
EXEC_CHECK_SIG . . . . . . . . .  	L NEAR	0131	ZEXEC_CODE
EXEC_CHKSUM  . . . . . . . . . .  	L WORD 	002C	ZEXEC_DATA
EXEC_COM_FILE  . . . . . . . . .  	L NEAR	0303	ZEXEC_CODE
EXEC_COM_FILEJ . . . . . . . . .  	L NEAR	013E	ZEXEC_CODE
EXEC_CS  . . . . . . . . . . . .  	L WORD 	0030	ZEXEC_DATA
EXEC_CTRLC . . . . . . . . . . .  	L BYTE 	0038	ZEXEC_DATA
EXEC_DEALLOC . . . . . . . . . .  	N PROC	04E1	ZEXEC_CODE	Global	Length = 0009
EXEC_DMA . . . . . . . . . . . .  	L WORD 	0036	ZEXEC_DATA
EXEC_DO_CHANGE_OWNER . . . . . .  	N PROC	04F5	ZEXEC_CODE	Global	Length = 0023
EXEC_DO_RELOC  . . . . . . . . .  	L NEAR	027F	ZEXEC_CODE
EXEC_ENVIRON . . . . . . . . . .  	L WORD 	0013	ZEXEC_DATA
EXEC_ERR . . . . . . . . . . . .  	L NEAR	025F	CODERES
EXEC_FH  . . . . . . . . . . . .  	L WORD 	0005	ZEXEC_DATA
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FIND_RES  . . . . . . . . .  	L NEAR	0224	ZEXEC_CODE
EXEC_FUNC  . . . . . . . . . . .  	L BYTE 	0004	ZEXEC_DATA
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_GET_ADDR  . . . . . . . . .  	L NEAR	02E7	ZEXEC_CODE
EXEC_GET_ENTRIES . . . . . . . .  	L NEAR	02B5	ZEXEC_CODE
EXEC_GET_ENVIRON_LEN . . . . . .  	L NEAR	00C9	ZEXEC_CODE
EXEC_GO  . . . . . . . . . . . .  	L NEAR	04C4	ZEXEC_CODE
EXEC_GOT_BLOCK . . . . . . . . .  	L NEAR	01B9	ZEXEC_CODE
EXEC_INIT_CS . . . . . . . . . .  	L WORD 	000D	ZEXEC_DATA
EXEC_INIT_IP . . . . . . . . . .  	L WORD 	000B	ZEXEC_DATA
EXEC_INIT_SP . . . . . . . . . .  	L WORD 	000F	ZEXEC_DATA
EXEC_INIT_SS . . . . . . . . . .  	L WORD 	0011	ZEXEC_DATA
EXEC_INTERNAL_BUFFER . . . . . .  	NEAR 	001A	ZEXEC_DATA
EXEC_INTERNAL_BUFFER_SIZE  . . .  	Number	001E	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_IOV . . . . . . . . . . . .  	L WORD 	0034	ZEXEC_DATA
EXEC_IP  . . . . . . . . . . . .  	L WORD 	002E	ZEXEC_DATA
EXEC_LEN_MOD_512 . . . . . . . .  	L WORD 	001C	ZEXEC_DATA
EXEC_LOAD_BLOCK  . . . . . . . .  	L WORD 	0017	ZEXEC_DATA
EXEC_LOAD_HIGH . . . . . . . . .  	L BYTE 	0019	ZEXEC_DATA
EXEC_LONG_RET  . . . . . . . . .  	F PROC	04E0	ZEXEC_CODE	Global	Length = 0001
EXEC_LOW_SEG . . . . . . . . . .  	L WORD 	0039	ZEXEC_DATA
EXEC_MAX_BSS . . . . . . . . . .  	L WORD 	0026	ZEXEC_DATA
EXEC_MIN_BSS . . . . . . . . . .  	L WORD 	0024	ZEXEC_DATA
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXEC_NO_MEM  . . . . . . . . . .  	L NEAR	016A	ZEXEC_CODE
EXEC_NO_MEMJ . . . . . . . . . .  	L NEAR	0300	ZEXEC_CODE
EXEC_NO_MEMJ1  . . . . . . . . .  	L NEAR	0221	ZEXEC_CODE
EXEC_NO_MEM_TRY  . . . . . . . .  	L NEAR	0215	ZEXEC_CODE
EXEC_PAGES . . . . . . . . . . .  	L WORD 	001E	ZEXEC_DATA
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-10
                                                             

EXEC_PAR_DIR . . . . . . . . . .  	L WORD 	0022	ZEXEC_DATA
EXEC_READ_COM  . . . . . . . . .  	L NEAR	035B	ZEXEC_CODE
EXEC_READ_HEADER . . . . . . . .  	L NEAR	0104	ZEXEC_CODE
EXEC_READ_OK . . . . . . . . . .  	L NEAR	024C	ZEXEC_CODE
EXEC_READ_RELOC  . . . . . . . .  	L NEAR	02B9	ZEXEC_CODE
EXEC_RELOC_ONE . . . . . . . . .  	L NEAR	02DF	ZEXEC_CODE
EXEC_REL_FAC . . . . . . . . . .  	L WORD 	0007	ZEXEC_DATA
EXEC_RES_LEN_PARA  . . . . . . .  	L WORD 	0009	ZEXEC_DATA
EXEC_RET_ERR . . . . . . . . . .  	L NEAR	0060	ZEXEC_CODE
EXEC_RLE_COUNT . . . . . . . . .  	L WORD 	0020	ZEXEC_DATA
EXEC_RLE_TABLE . . . . . . . . .  	L WORD 	0032	ZEXEC_DATA
EXEC_SAVE_ENVIRON  . . . . . . .  	L NEAR	00EB	ZEXEC_CODE
EXEC_SAVE_START  . . . . . . . .  	L NEAR	0141	ZEXEC_CODE
EXEC_SCAN_ENV  . . . . . . . . .  	L NEAR	00BF	ZEXEC_CODE
EXEC_SET_PDB . . . . . . . . . .  	L NEAR	03B4	ZEXEC_CODE
EXEC_SET_RETURN  . . . . . . . .  	L NEAR	0461	ZEXEC_CODE
EXEC_SIGNATURE . . . . . . . . .  	L WORD 	001A	ZEXEC_DATA
EXEC_SIZE  . . . . . . . . . . .  	L WORD 	0015	ZEXEC_DATA
EXEC_SKIP  . . . . . . . . . . .  	L NEAR	038A	ZEXEC_CODE
EXEC_SP  . . . . . . . . . . . .  	L WORD 	002A	ZEXEC_DATA
EXEC_SS  . . . . . . . . . . . .  	L WORD 	0028	ZEXEC_DATA
EXEC_TRY_HIGH  . . . . . . . . .  	L NEAR	01F5	ZEXEC_CODE
EXEC_TRY_JUST_BELOW  . . . . . .  	L NEAR	01FC	ZEXEC_CODE
EXEC_USE_AX  . . . . . . . . . .  	L NEAR	01DF	ZEXEC_CODE
EXEC_WAIT  . . . . . . . . . . .  	L NEAR	0291	CODERES	Global
EXESEG . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
EXESUM . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXTCOM . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXT_EXEC . . . . . . . . . . . .  	L NEAR	0286	CODERES	Global

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATALC . . . . . . . . . . . . .  	L NEAR	02D8	CODERES
FATALRET . . . . . . . . . . . .  	L NEAR	02F3	CODERES
FATALRET2  . . . . . . . . . . .  	L NEAR	02F9	CODERES
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-11
                                                             

FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FORFLAG  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FRETMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External

GETCOM1  . . . . . . . . . . . .  	L NEAR	0515	CODERES
GETCOMDSK  . . . . . . . . . . .  	L NEAR	04FA	CODERES
GETCOMDSK2 . . . . . . . . . . .  	L NEAR	04DB	CODERES	Global
GETCOMDSK3 . . . . . . . . . . .  	L NEAR	04FD	CODERES
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETRAWFLUSHEDBYTE  . . . . . . .  	L NEAR	0522	CODERES
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_MEM  . . . . . . . . . . . .  	L NEAR	01AA	CODERES
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_USER_STACK . . . . . . . . .  	N PROC	0538	ZEXEC_CODE	Global	Length = 0007
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOTDRV2  . . . . . . . . . . . .  	L NEAR	046C	CODERES
GOTECODE . . . . . . . . . . . .  	L NEAR	033A	CODERES
GOTEXECEMES  . . . . . . . . . .  	L NEAR	027F	CODERES
GOTSWITCH  . . . . . . . . . . .  	Number	8000	

HALTMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
HANDLE01 . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
HAVCOM . . . . . . . . . . . . .  	L NEAR	042B	CODERES
HAVEXEC  . . . . . . . . . . . .  	L NEAR	021E	CODERES
HEADCALL . . . . . . . . . . . .  	V DWORD	0000	TRANSPACE	External
HEADFIX  . . . . . . . . . . . .  	L NEAR	048E	CODERES
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		
HOPELESS . . . . . . . . . . . .  	L NEAR	04F4	CODERES

IBM  . . . . . . . . . . . . . .  	Number	FFFF	
IBMJAPAN . . . . . . . . . . . .  	Alias	 FALSE		
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-12
                                                             

IBMVER . . . . . . . . . . . . .  	Alias	 IBM		
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_2E . . . . . . . . . . . . .  	L NEAR	0343	CODERES	Global
INT_2E_RET . . . . . . . . . . .  	V DWORD	0000	DATARES	External
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IO_SAVE  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Alias	 FALSE		
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LINPERPAG  . . . . . . . . . . .  	Number	0017	
LOADCOM  . . . . . . . . . . . .  	L NEAR	052D	CODERES	Global
LOADING  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LODCOM . . . . . . . . . . . . .  	L NEAR	0374	CODERES	Global
LODCOM1  . . . . . . . . . . . .  	L NEAR	03CF	CODERES	Global
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
LTPA . . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External

MEMOK  . . . . . . . . . . . . .  	L NEAR	039F	CODERES
MEMSIZ . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-13
                                                             

MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MSVER  . . . . . . . . . . . . .  	Number	0000	

NEEDCOM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NOCOM  . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NOEXEC . . . . . . . . . . . . .  	L NEAR	0299	CODERES
NOHANDMES  . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NORMPERLIN . . . . . . . . . . .  	Number	0001	
NOSETSING  . . . . . . . . . . .  	L NEAR	02C9	CODERES
NOSETVER . . . . . . . . . . . .  	L NEAR	03ED	CODERES
NOSNG  . . . . . . . . . . . . .  	L NEAR	03F7	CODERES
NOT_SINGLE . . . . . . . . . . .  	L NEAR	047B	CODERES
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NO_OWNER . . . . . . . . . . . .  	L NEAR	03E3	ZEXEC_CODE
NUMIO  . . . . . . . . . . . . .  	L BYTE 	003D	ZEXEC_DATA

OEMIBM . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARENT . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PATHSTRING . . . . . . . . . . .  	L BYTE 	0010	ENVIRONMENT	Global
PERMCOM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PIPEFLAG . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PROGSTART  . . . . . . . . . . .  	L NEAR	0100	CODERES
PROMPT . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PSWITCH  . . . . . . . . . . . .  	Number	0002	

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
RBADNAM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
RDIRCHAR . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
READ . . . . . . . . . . . . . .  	Number	003F	
READCOM  . . . . . . . . . . . .  	L NEAR	0548	CODERES
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REMCHECK . . . . . . . . . . . .  	L NEAR	0461	CODERES
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-14
                                                             

RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RESTHAND . . . . . . . . . . . .  	L NEAR	04E1	CODERES	Global
RESTORE_CTRLC  . . . . . . . . .  	N PROC	053F	ZEXEC_CODE	Global	Length = 000F
RET10  . . . . . . . . . . . . .  	L NEAR	059D	CODERES
RETCODE  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
RET_2E . . . . . . . . . . . . .  	L NEAR	0316	CODERES
RET_L  . . . . . . . . . . . . .  	NEAR 	04F4	ZEXEC_CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	
RPRINT . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
RSTACK . . . . . . . . . . . . .  	L WORD 	0180	CODERES	Global
RSWITCHAR  . . . . . . . . . . .  	V BYTE 	0000	DATARES	External

SAVE_PDB . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
SAVHAND  . . . . . . . . . . . .  	L NEAR	04BF	CODERES	Global
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETNREM  . . . . . . . . . . . .  	L NEAR	0488	CODERES
SETREM . . . . . . . . . . . . .  	L NEAR	0486	CODERES
SETVECT  . . . . . . . . . . . .  	L NEAR	059E	CODERES	Global
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SINGLECOM  . . . . . . . . . . .  	V WORD 	0000	DATARES	External
STALL  . . . . . . . . . . . . .  	L NEAR	02F1	CODERES
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-15
                                                             

STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
SUM  . . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
SYM  . . . . . . . . . . . . . .  	Number	003E	
SYSCALL  . . . . . . . . . . . .  	L NEAR	0180	CODERES	Global
SYS_CALL . . . . . . . . . . . .  	V DWORD	0000	DATARES	External
SYS_RET  . . . . . . . . . . . .  	L NEAR	052F	ZEXEC_CODE
SYS_RET_ERR  . . . . . . . . . .  	L NEAR	0518	ZEXEC_CODE
SYS_RET_ERR_J  . . . . . . . . .  	NEAR 	017E	ZEXEC_CODE
SYS_RET_OK . . . . . . . . . . .  	L NEAR	0527	ZEXEC_CODE
SYS_RET_OK_J . . . . . . . . . .  	NEAR 	04C1	ZEXEC_CODE

THEADFIX . . . . . . . . . . . .  	F PROC	048A	CODERES	Global	Length = 0004
TOOBIG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
TRANDATAEND  . . . . . . . . . .  	V BYTE 	0000	TRANDATA	External
TRANS  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
TRANSPACEEND . . . . . . . . . .  	V BYTE 	0000	TRANSPACE	External
TRANSTART  . . . . . . . . . . .  	L WORD 	0000	TAIL
TRANVARS . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
TREMCHECK  . . . . . . . . . . .  	F PROC	045D	CODERES	Global	Length = 0004
TRNSEG . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TRYDOOPEN  . . . . . . . . . . .  	L NEAR	0543	CODERES

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USERPATH . . . . . . . . . . . .  	L BYTE 	0015	ENVIRONMENT
USER_SP  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
USER_SS  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
USESLASH . . . . . . . . . . . .  	L NEAR	043E	CODERES

VER  . . . . . . . . . . . . . .  	Number	00C8	
VER200 . . . . . . . . . . . . .  	Text  		
VERVAL . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
VSWITCH  . . . . . . . . . . . .  	Number	0010	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WIDEPERLIN . . . . . . . . . . .  	Number	0005	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRONGCOM . . . . . . . . . . . .  	L NEAR	057F	CODERES
WRONGCOM1  . . . . . . . . . . .  	L NEAR	0571	CODERES
WSWITCH  . . . . . . . . . . . .  	Number	0001	

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	
Microsoft (R) Macro Assembler  Version 4.00                 11/19/18 11:24:15
                                                            Symbols-16
                                                             


ZERO . . . . . . . . . . . . . .  	NEAR 	0000	ZEXEC_CODE
ZEXEC  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
ZEXECCODEEND . . . . . . . . . .  	L BYTE 	054E	ZEXEC_CODE	Global
ZEXECCODESIZE  . . . . . . . . .  	Number	054E	
ZEXECDATAEND . . . . . . . . . .  	L BYTE 	003E	ZEXEC_DATA	Global
ZEXECDATASIZ . . . . . . . . . .  	Number	003E	
ZZY  . . . . . . . . . . . . . .  	F PROC	02D4	CODERES	Length = 0001

$EXEC  . . . . . . . . . . . . .  	F PROC	0000	ZEXEC_CODE	Global	Length = 04E1
??0000 . . . . . . . . . . . . .  	L NEAR	052C	CODERES
??0002 . . . . . . . . . . . . .  	L NEAR	005D	ZEXEC_CODE
??0003 . . . . . . . . . . . . .  	L NEAR	0060	ZEXEC_CODE
??0004 . . . . . . . . . . . . .  	L NEAR	0093	ZEXEC_CODE
??0005 . . . . . . . . . . . . .  	L NEAR	017E	ZEXEC_CODE
??0006 . . . . . . . . . . . . .  	L NEAR	03CB	ZEXEC_CODE
??0007 . . . . . . . . . . . . .  	L NEAR	04C1	ZEXEC_CODE
??0008 . . . . . . . . . . . . .  	L NEAR	04E9	ZEXEC_CODE
??0009 . . . . . . . . . . . . .  	L NEAR	04F4	ZEXEC_CODE


   3219 Source  Lines
   3477 Total   Lines
    805 Symbols

  12368 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
